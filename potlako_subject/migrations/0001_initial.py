# Generated by Django 3.1.3 on 2020-11-14 18:14

import _socket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_revision.revision_field
import edc_base.model_fields.custom_fields
import edc_base.model_fields.date_estimated
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.model_validators.phone
import edc_base.sites.managers
import edc_base.utils
import edc_consent.validators
import edc_protocol.validators
import edc_sms.models.subject_recipent_model_mixin
import potlako_subject.models.subject_visit
import potlako_subject.models.validators
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('edc_appointment', '0015_auto_20200516_1820'),
        ('sites', '0002_alter_domain_unique'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CallAchievements',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClinicianCallEnrollment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Report Time and Date')),
                ('screening_identifier', models.CharField(editable=False, max_length=36, unique=True, verbose_name='Eligibility Identifier')),
                ('reg_date', models.DateField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of visit when patient was registered at facility')),
                ('contact_date', models.DateField(verbose_name='Date Potlako+ staff member learnt of the cancer suspect')),
                ('cancer_suspect', models.CharField(choices=[('call_with_clinician', 'Phone call with clinician'), ('review_clinic_register', 'Review of clinic register'), ('clinician_site_visit_discussion', 'Site visit discussion with clinician'), ('OTHER', 'Other (specify)')], max_length=31, verbose_name='How did the team learn of the cancer suspect?')),
                ('cancer_suspect_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('received_training', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has the clinician received Potlako+ training')),
                ('call_clinician_type', models.CharField(blank=True, choices=[('med_officer', 'Medical Officer'), ('nurse', 'Nurse'), ('smo/cmo', 'SMO/CMO'), ('research_team', 'Research team'), ('OTHER', 'Other type (specify)')], max_length=50, null=True, verbose_name='Type of clinician spoken to on the phone')),
                ('call_clinician_other', models.CharField(blank=True, max_length=50, null=True, verbose_name="If 'Other type', specify the type of clinician")),
                ('consented_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Did the potential participant, agree to being contacted by Potlako+ team')),
                ('paper_register', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has patient been entered in Potlako+ paper register?')),
                ('facility', models.CharField(choices=[('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('otse_clinic', 'Otse clinic'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('oodi_clinic', 'Oodi clinic'), ('bokaa_clinic', 'Bokaa clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('sheleketla_clinic', 'Sheleketla clinic'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('lerala_clinic', 'Lerala clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('sefophe_clinic', 'Sefophe clinic'), ('mmadinare_primary_hospital', 'Mmadinare Primary Hospital'), ('manga_clinic', 'Manga clinic'), ('mandunyane_clinic', 'Mandunyane clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('nata_clinic', 'Nata clinic'), ('OTHER', 'Other (specify)')], max_length=40, verbose_name='Name of facility visited at enrollment')),
                ('facility_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('facility_unit', models.CharField(choices=[('OPD', 'OPD'), ('A&E', 'A&E'), ('IDCC', 'IDCC'), ('N/A', 'Not applicable'), ('OTHER', 'Other (specify)')], max_length=20, verbose_name='Unit at facility where patient was seen at enrollment')),
                ('unit_other', models.TextField(blank=True, max_length=250, null=True, verbose_name="If 'Other', describe unit at facility where patient was seen at enrollment")),
                ('national_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, unique=True, validators=[potlako_subject.models.validators.identity_check], verbose_name='Patient ID number (Omang)')),
                ('hospital_identity', django_crypto_fields.fields.identity_field.IdentityField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Patient hospital ID number (if available)')),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Patient last name')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Patient first name')),
                ('other_names', models.CharField(blank=True, max_length=50, null=True, verbose_name='Patient other names')),
                ('age_in_years', models.IntegerField(help_text='(Years)', verbose_name='How old is the patient?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, verbose_name='Gender')),
                ('village_town', models.CharField(max_length=50, verbose_name='Village or Town where patient resides')),
                ('patient_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does patient have a cell phone number or telephone number?')),
                ('primary_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Patient phone number 1 (Primary)')),
                ('secondary_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Patient phone number 2 (Secondary)')),
                ('telephone_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Patient telephone number')),
                ('kin_details_provided', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Did the patient give details of next of kin?')),
                ('clinician_type', models.CharField(choices=[('med_officer', 'Medical Officer'), ('nurse', 'Nurse'), ('smo/cmo', 'SMO/CMO'), ('research_team', 'Research team'), ('OTHER', 'Other type (specify)')], max_length=50, verbose_name='Type of clinician (or most senior clinician) who saw the patient')),
                ('clinician_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If Other type, describe type of clinician (or the most senior clinician) who saw patient')),
                ('symptoms_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('early_symptoms_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future, potlako_subject.models.validators.datetime_not_now], verbose_name='Date of earliest onset symptom(s)')),
                ('early_symptoms_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the symptoms date estimated?')),
                ('early_symptoms_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date was estimated, if any?')),
                ('suspected_cancer', models.CharField(choices=[('anal', 'Anal'), ('breast', 'Breast'), ('vulva', 'Vulva'), ('penile', 'Penile'), ('cervical', 'Cervical'), ('head_neck', 'Head and Neck'), ('vaginal', 'Vaginal'), ('prostate', 'Prostate'), ('kaposi_sarcoma', 'Kaposi Sarcoma'), ('unsure', 'Unsure'), ('OTHER', 'Other (specify)')], help_text="(if clinician unsure, select 'unsure')", max_length=30, verbose_name='Suspected Cancer type')),
                ('suspected_cancer_unsure', models.TextField(blank=True, max_length=60, null=True, verbose_name='If unsure of cancer type, kindly list all suspected cancer types')),
                ('suspected_cancer_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=30, null=True, verbose_name='If other suspected Cancer type, please specify')),
                ('suspicion_level', models.CharField(choices=[('low', 'Low, cancer possible but other conditions are much more likely'), ('moderate', 'Moderate, cancer is among the most likely causes of the symptoms/signs'), ('high', 'High, cancer is the leading suspected cause of the symptoms/signs')], max_length=10, verbose_name="How strong is clinician's suspicion for cancer?")),
                ('performance', models.IntegerField(choices=[(0, '0 - Fully active, able to carry on all pre-disease performance without restriction'), (1, '1 - Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature, e.g., light house work, office work'), (2, '2 - Ambulatory and capable of all selfcare but unable to carry out any work activities; up and about more than 50% of waking hours'), (3, '3 - Capable of only limited selfcare; confined to bed or chair more than 50% of waking hours'), (4, '4 - Completely disabled; cannot carry on any selfcare; totally confined to bed or chair'), (5, '5 - Dead')], default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)], verbose_name='Performance Status (ECOG)')),
                ('pain_score', models.CharField(choices=[('0_no_pain', '0 No pain'), ('1_3_mild', '1-3 mild pain'), ('4_6_moderate', '4-6 moderate pain'), ('7_10_severe', '7-10 severe pain')], default='0_no_pain', max_length=15)),
                ('last_hiv_result', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('unknown', 'Unknown')], max_length=10, verbose_name="What was the patient's last HIV result?")),
                ('patient_disposition', models.CharField(choices=[('return', 'Return'), ('refer', 'Refer'), ('discharge', 'Discharge')], max_length=10, verbose_name="What was the patient's disposition at the end of this visit?")),
                ('referral_reason', models.TextField(blank=True, max_length=100, null=True, verbose_name='Reason for referral')),
                ('referral_date', models.DateField(blank=True, null=True, verbose_name='Next appointment date')),
                ('referral_facility', models.CharField(blank=True, choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=40, null=True, verbose_name='Name and type of facility patient being referred to(referral facility)')),
                ('referral_facility_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('referral_unit', models.CharField(choices=[('OPD', 'OPD'), ('A&E', 'A&E'), ('IDCC', 'IDCC'), ('N/A', 'Not applicable'), ('OTHER', 'Other (specify)')], default='N/A', max_length=20, verbose_name='Unit where patient is being referred to')),
                ('referral_unit_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('referral_discussed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='Was referral discussed with receiving clinician?')),
                ('triage_status', models.CharField(choices=[('emergency', 'Emergency'), ('urgent', 'Urgent'), ('routine', 'Routine')], max_length=10, verbose_name="What is patient's triage status?")),
                ('investigated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=7, verbose_name='Were there any investigations ordered or performed during this visit?')),
                ('tests_ordered', models.TextField(blank=True, max_length=255, null=True, verbose_name='Indicate which tests were ordered.')),
                ('comments', models.TextField(blank=True, max_length=150, null=True, verbose_name='Are there any other comments regarding this enrollment visit?')),
                ('is_eligible', models.BooleanField(default=False, editable=False)),
                ('ineligibility', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason not eligible')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Clinician call - Enrollment',
                'verbose_name_plural': 'Clinician call - Enrollment',
            },
        ),
        migrations.CreateModel(
            name='DiscussionPerson',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Disposition',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Housemate',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImagingTestType',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InvestigationNotes',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PathologyTest',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientResidence',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SmsPlatform',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SourceOfInfo',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason_unscheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'Missed' above, provide the reason the scheduled visit was missed")),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason', models.CharField(choices=[('initial_visit/contact', 'Initial visit/contact'), ('fu_visit/contact', 'Follow up visit/contact'), ('unscheduled_visit/contact', 'Unscheduled visit/contact'), ('missed_visit', 'Missed visit'), ('death', 'Death'), ('off study', 'Off study (use only when taking subject off study)'), ('deferred', 'Deferred')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_unscheduled', models.CharField(choices=[('routine_oncology', 'Routine oncology clinic visit (i.e. planned chemo, follow-up)'), ('ill_oncology', 'Ill oncology clinic visit'), ('patient_called', 'Patient called to come for visit'), ('N/A', 'Not Applicable'), ('OTHER', 'Other, specify:')], default='N/A', max_length=50, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('info_source', models.CharField(choices=[('clinic_visit', 'Clinic visit with participant'), ('other_contact_subject', 'Other contact with participant (i.e telephone call)'), ('contact_health worker', 'Contact with health care worker'), ('contact_family/designated_person', 'Contact with family or designated person who can provide information'), ('OTHER', 'Other,specify')], max_length=40, verbose_name='What is the main source of this information?')),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edc_appointment.appointment')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Subject Visit',
                'ordering': ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence', 'report_datetime'),
                'abstract': False,
                'unique_together': {('subject_identifier', 'visit_schedule_name', 'schedule_name', 'report_datetime'), ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence')},
            },
            managers=[
                ('on_site', potlako_subject.models.subject_visit.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='Symptoms',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TestsOrderedType',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TestType',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransportCriteria',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VerbalConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('version', models.CharField(max_length=10, verbose_name='Consent version')),
                ('screening_identifier', models.CharField(max_length=36, unique=True, verbose_name='Screening Identifier')),
                ('subject_identifier', models.CharField(blank=True, max_length=50, null=True, verbose_name='Subject Identifier')),
                ('file', models.FileField(upload_to='verbal_consents/')),
                ('user_uploaded', models.CharField(max_length=50, verbose_name='user uploaded')),
                ('datetime_captured', models.DateTimeField(default=edc_base.utils.get_utcnow)),
                ('language', models.CharField(choices=[('tn', 'Setswana'), ('en', 'English'), ('kck', 'Ikalanga')], max_length=25, verbose_name='Language of consent')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Potlako+ Verbal Consent',
                'verbose_name_plural': 'Potlako+ Verbal Consents',
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='Transport',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('is_criteria_met', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient meet the criteria for transport support')),
                ('car_ownership', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is there a car at home?')),
                ('criteria_met_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('next_visit_date', models.DateField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.date_is_future], verbose_name='Visit Date for which transportation is being planned (next visit date)')),
                ('visit_facility', models.CharField(choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=40, verbose_name='Visit facility for which transport is being planned')),
                ('visit_facility_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('transport_type', models.CharField(choices=[('facility_vehicle', 'Facility Vehicle - Arranged by RC'), ('bus', 'Bus Voucher'), ('cash', 'Cash transfer to patient'), ('patient_arranged_vehicle', 'Facility Vehicle - Arranged by Patient or Clinician'), ('OTHER', 'Other (specify)'), ('N/A', 'N/A')], max_length=50, verbose_name='Type of transport support being arranged')),
                ('vehicle_status', models.CharField(choices=[('in_progress', 'Request made to facility, arrangement in progress'), ('to_be_communicated', 'Arrangement confirmed by facility but not yet communicated with patient or clinician'), ('confirmed_communicated', 'Arrangement confirmed by facility and communicated to the patient and clinician'), ('vehicle_cannot_be_provided', 'Request made facility NOT able to provide transport/vehicle for patient'), ('OTHER', 'Other (specify)'), ('N/A', 'N/A')], max_length=100, verbose_name='Status of facility vehicle arrangement at end of transport planning encounter')),
                ('transport_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('vehicle_status_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=100, null=True, verbose_name='If other facility vehicle status, describe details')),
                ('bus_voucher_status', models.CharField(choices=[('not_drafted', 'Letter not yet drafted'), ('not_sent', 'Letter completed but not yet sent to facility'), ('not_received', 'Letter sent to facility (but not yet received)'), ('patient_received', 'Letter received by patient'), ('OTHER', 'Other (specify)'), ('N/A', 'N/A')], max_length=50, verbose_name='Status of bus voucher arrangement at end of transport planning encounter')),
                ('bus_voucher_status_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other, describe status of transport arrangement')),
                ('cash_transfer_status', models.CharField(choices=[('not_initiated', 'Transaction not yet initiated'), ('successful_confirmed', 'Transaction successful and patient confirmed'), ('successful_unconfirmed', 'Transaction successful but no patient confirmation'), ('not_successful', 'Transaction not successful (specify)'), ('N/A', 'N/A')], max_length=50, verbose_name='Status of cash transfer arrangement at end of transport planning encounter')),
                ('cash_transfer_status_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, help_text='(Please detail issue and action steps to resolve issue)', max_length=100, null=True, verbose_name='If transaction did not go through, specify details')),
                ('comments', models.TextField(blank=True, help_text='(IF NOTHING TO REPORT, PLEASE WRITE "NA")', max_length=150, null=True, verbose_name='Any other general comments regarding transport planning')),
                ('criteria_met', models.ManyToManyField(blank=True, to='potlako_subject.TransportCriteria', verbose_name='What criteria has been met for transportation support?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Transport',
                'verbose_name_plural': 'Transport',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SymptomsAndCareSeekingEndpoint',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('cancer_symptom_date', models.DateField(verbose_name='Date of first possible cancer symptom awareness')),
                ('cancer_symptom_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the awareness date estimated?')),
                ('cancer_symptom_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('discussion_date', models.DateField(verbose_name='Date of first discussion with someone')),
                ('discussion_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the discussion date estimated?')),
                ('discussion_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('seek_help_date', models.DateField(verbose_name='Date that participant decided to seek help for possible cancer symptom from clinic or hospital')),
                ('seek_help_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the seeking help date estimated?')),
                ('seek_help_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('first_seen_date', models.DateField(verbose_name='Date that participant was first seen at the clinic or for possible cancer symptom')),
                ('first_seen_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the first first seen date estimated?')),
                ('first_seen_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Care Seeking Endpoint',
                'verbose_name_plural': 'Symptom And Care Seeking - Endpoint Recording',
                'abstract': False,
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='SymptomAndCareSeekingAssessment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('first_visit_promt', models.TextField(help_text='Try identify all participant-reported symptoms first; the checklist comes later', max_length=1000, verbose_name='Can you please tell me about what first prompted you togo to the clinic, nurse or doctor? Can you describe the symptom(s) a bit more? You mentioned (symptoms(s)),were there any more symptoms that you noticed about this time?')),
                ('symptoms_cope', models.TextField(help_text='How long did it take before you decided to use any treatment?How long did you try for? Did it help at all?', max_length=1000, verbose_name='What did you do to cope with/help these symptoms?')),
                ('symptoms_present_other', models.TextField(max_length=250, verbose_name='If other symptoms, please specify')),
                ('symptoms_discussion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('not_sure', 'Not sure')], max_length=8, verbose_name='Did you discuss your symptoms with anyone before going to the clinic?')),
                ('reason_no_discussion', models.CharField(blank=True, choices=[('not_comfortable', 'I was not comfortable to discuss it.'), ('not_trusting', 'I do not trust anyone.'), ('fear_discrimination', 'I fear discrimination/judgement.'), ('not_necessary', 'I do not think it is necessary.'), ('OTHER', 'Other (specify)')], max_length=20, null=True, verbose_name="If no, Why didn't you discuss with anyone?")),
                ('reason_no_discussion_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('discussion_person_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('discussion_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='When did this discussion take place?')),
                ('discussion_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the discussion date estimated?')),
                ('discussion_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('medical_advice', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('not_sure', 'Not sure')], max_length=8, null=True, verbose_name='If yes, did they encourage you to seek advice from clinic?')),
                ('clinic_visit_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='When did you go to a clinic or hospital about these symptoms?')),
                ('clinic_visit_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the hospital/clinic visit date estimated?')),
                ('clinic_visit_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('clinic_visited', models.CharField(choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=32, verbose_name='Which clinic or hospital did you go to?')),
                ('clinic_visited_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('cause_assumption', models.TextField(max_length=1000, verbose_name='What do you think is causing your symptoms?')),
                ('symptoms_concern', models.CharField(blank=True, choices=[('not_concerned_at_all', 'Not concerned at all'), ('little_concern', 'Little concern'), ('some_concern', 'Some concern'), ('quite_concerned', 'Quite concerned'), ('very_concerned', 'Very concerned')], max_length=25, null=True, verbose_name='How concerned are you about your symptoms?')),
                ('discussion_person', models.ManyToManyField(blank=True, to='potlako_subject.DiscussionPerson', verbose_name='If yes, who did you discuss with?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.subjectvisit')),
                ('symptoms_present', models.ManyToManyField(to='potlako_subject.Symptoms', verbose_name="Now, we've talked about the symptoms that you have described: I'd also like to check whether you had any of the following symptoms")),
            ],
            options={
                'verbose_name': 'Symptom And Care Seeking Assessment',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectScreening',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('screening_identifier', models.CharField(max_length=36, unique=True, verbose_name='Screening Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('enrollment_interest', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('deceased', 'Deceased')], max_length=8, verbose_name='Does the patient want to be enrolled into the study?')),
                ('disinterest_reason', models.CharField(blank=True, choices=[('dont_want_to_participate', "I don't want to be part of a study"), ('dont_think_I_have_cancer', "I don't think I have cancer"), ('partner_doesnt_want_to_participate', "My partner doesn't want me to participate"), ('OTHER', 'Other (specify)')], max_length=50, null=True, verbose_name='If no, reason patient does not wish to enroll into the study')),
                ('disinterest_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('residency', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='Does the potential participant spend or intend to spend atleast 14 nights per month in the study community?')),
                ('nationality', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='Is the potential participant a Botswana citizen?')),
                ('has_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'NO' STOP patient cannot be enrolled )", max_length=3, verbose_name='Is the potential participant a cancer suspect? ')),
                ('age_in_years', models.IntegerField(help_text='(Years)', verbose_name='Patient age')),
                ('enrollment_site', models.CharField(choices=[('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('otse_clinic', 'Otse clinic'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('oodi_clinic', 'Oodi clinic'), ('bokaa_clinic', 'Bokaa clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('sheleketla_clinic', 'Sheleketla clinic'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('lerala_clinic', 'Lerala clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('sefophe_clinic', 'Sefophe clinic'), ('mmadinare_primary_hospital', 'Mmadinare Primary Hospital'), ('manga_clinic', 'Manga clinic'), ('mandunyane_clinic', 'Mandunyane clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('nata_clinic', 'Nata clinic'), ('OTHER', 'Other (specify)')], help_text='Hospital where subject is recruited', max_length=50, null=True)),
                ('enrollment_site_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('is_eligible', models.BooleanField(default=False, editable=False)),
                ('ineligibility', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason not eligible')),
                ('is_consented', models.BooleanField(default=False, editable=False)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Potlako+ Eligibility',
                'verbose_name_plural': 'Potlako+ Eligibility',
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='SubjectLocator',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('action_identifier', models.CharField(max_length=25, null=True)),
                ('tracking_identifier', models.CharField(max_length=30, null=True)),
                ('related_tracking_identifier', models.CharField(max_length=30, null=True)),
                ('parent_tracking_identifier', models.CharField(max_length=30, null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('may_call', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission <b>to contacted by telephone or cell</b> by study staff for follow-up purposes during the study?')),
                ('may_visit_home', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission for study staff <b>to make home visits</b> for follow-up purposes?')),
                ('may_sms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given permission <b>to be contacted by SMS</b> by study staff for follow-up purposes during the study?')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Mailing address ')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Physical address with detailed description')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_contact_indirectly', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given permission for study staff <b>to contact anyone else</b> for follow-up purposes during the study?')),
                ('indirect_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('indirect_contact_relation', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('indirect_contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Full physical address ')),
                ('indirect_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('indirect_contact_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternative)')),
                ('indirect_contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Work contact telephone')),
                ('subject_work_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Work contact cell number')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow)),
                ('date_signed', models.DateField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date Locator Form signed ')),
                ('local_clinic', models.CharField(help_text='Please give clinic code.', max_length=75, verbose_name='Which health facility do you normally go to, in this village?')),
                ('home_village', models.CharField(max_length=75, verbose_name='Where is your home village?')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include firstname and lastname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('doesnt_work', 'Does not work')], max_length=25, verbose_name='Has the participant given permission to contacted <b>at work</b> by telephone or cell by study staff for follow-up purposes during the study?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='subject_locator_site', to='sites.site')),
            ],
            options={
                'verbose_name': 'Subject Locator',
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='PatientCallInitial',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('patient_call_time', models.TimeField(verbose_name='Start of patient initial call (timestamp)')),
                ('patient_call_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date of initial patient call')),
                ('age_in_years', models.IntegerField(help_text='(Years)', verbose_name='Patient age')),
                ('residential_district', models.CharField(choices=[('bokaa', 'Bokaa'), ('lentsweletau', 'Lentsweletau'), ('lerala', 'Lerala'), ('letlhakeng', 'Letlhakeng'), ('mathangwane', 'Mathangwane'), ('maunatlala', 'Maunatlala'), ('masunga', 'Masunga'), ('metsimotlhabe', 'Metsimotlhabe'), ('mmadinare', 'Mmadinare'), ('mmandunyane', 'Mmandunyane'), ('mmankgodi', 'Mmankgodi'), ('mmathethe', 'Mmathethe'), ('molapowabojang', 'Molapowabojang'), ('nata', 'Nata'), ('oodi', 'Oodi'), ('otse', 'Otse'), ('ramokgonami', 'Ramokgonami'), ('sefhophe', 'Sefhophe'), ('tati_siding', 'Tati Siding'), ('shoshong', 'Shoshong'), ('OTHER', 'Other (specify)')], max_length=50, null=True, verbose_name='where does the patient currently live?')),
                ('residential_district_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('patient_kgotla', models.CharField(max_length=30, verbose_name='What is the name of the ward where the patient resides?')),
                ('primary_clinic', models.CharField(choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=40, verbose_name='Nearest primary clinic or health post to where patient resides')),
                ('primary_clinic_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('education_level', models.CharField(blank=True, choices=[('non_formal', 'Non-Formal'), ('primary', 'Primary'), ('secondary', 'Secondary'), ('tertiary', 'Tertiary')], max_length=15, verbose_name='What is your highest level of education')),
                ('heard_of_potlako', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has the patient heard about Potlako+ ?')),
                ('source_of_info_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('potlako_sms_received', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Have you received Potlako+ messages?')),
                ('sms_platform_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('work_status', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the patient currently working?')),
                ('work_type', models.CharField(blank=True, choices=[('formal_employment', 'Formal employment'), ('temporary_employment', 'Temporary Employment'), ('part_time_employment', 'Part-Time Employment'), ('self_employed', 'Self Employed'), ('retired', 'Retired'), ('OTHER', 'Other,specify')], max_length=30, null=True, verbose_name='What kind of work does the patient do?')),
                ('work_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('unemployed_reason', models.CharField(blank=True, choices=[('pensioner', 'Pensioner'), ('senior_citizen', 'Senior Citizen'), ('does_not_want', 'Does not want to work'), ('looking', 'Looking for a job'), ('too_sick', 'Too sick to work'), ('disabled', 'Disabled'), ('OTHER', 'Other (specify)')], max_length=30, null=True, verbose_name='Why is the patient not working?')),
                ('unemployed_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('social_welfare', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=30, verbose_name='Is the patient on social welfare support?')),
                ('medical_conditions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient have any other medical conditions?')),
                ('patient_residence_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('other_facility', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Before enrollment visit, has the patient been seen for similar symptoms at other facilities?')),
                ('facility_number', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='How many facilities?')),
                ('perfomance_status', models.IntegerField(choices=[(0, '0 - Fully active, able to carry on all pre-disease performance without restriction'), (1, '1 - Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature, e.g., light house work, office work'), (2, '2 - Ambulatory and capable of all selfcare but unable to carry out any work activities; up and about more than 50% of waking hours'), (3, '3 - Capable of only limited selfcare; confined to bed or chair more than 50% of waking hours'), (4, '4 - Completely disabled; cannot carry on any selfcare; totally confined to bed or chair'), (5, '5 - Dead')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Patient performance status')),
                ('pain_score', models.CharField(choices=[('0_no_pain', '0 No pain'), ('1_3_mild', '1-3 mild pain'), ('4_6_moderate', '4-6 moderate pain'), ('7_10_severe', '7-10 severe pain')], default='0_no_pain', max_length=15, verbose_name='Patient pain score')),
                ('hiv_status', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('unknown', 'Unknown')], max_length=10, verbose_name="What is patient's current HIV status?")),
                ('hiv_test_date', models.DateField(blank=True, help_text='If positive test, date of positive test, if negative, date of most recent negative test', null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name="When was patient's last HIV test?")),
                ('hiv_test_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the HIV test date estimated?')),
                ('hiv_test_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date was estimated, if any?')),
                ('cd4_count_known', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Do you know your recent CD4 results ?')),
                ('cd4_count', models.IntegerField(blank=True, help_text='unit in cells/uL', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2000)], verbose_name='What is your recent CD4 count results?')),
                ('cd4_count_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name="When was patient's recent CD4 count results?")),
                ('cd4_count_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the CD4 count results date estimated?')),
                ('cd4_count_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date was estimated, if any?')),
                ('reason_cd4_unknown', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Reason cd4 count results unknown')),
                ('vl_results_known', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Do you know your recent viral load results ?')),
                ('vl_results', models.CharField(blank=True, choices=[('lt_400copies', '<400copies'), ('gt_400copies', '>400copies')], max_length=12, null=True, verbose_name='What is your recent VL results?')),
                ('vl_results_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name="When was patient's recent VL results?")),
                ('vl_results_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the VL results date estimated?')),
                ('vl_results_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date was estimated, if any?')),
                ('reason_vl_unknown', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Reason VL results unknown')),
                ('cancer_suspicion_known', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is patient aware that cancer is suspected as a diagnosis?')),
                ('enrollment_visit_method', models.CharField(choices=[('walked', 'Walked'), ('patient_drove_themselves', 'Patient Drove Themselves'), ('patient_driven_by_someone', 'Patient Was Driven By Someone'), ('special_taxi', 'Special Taxi'), ('OTHER', 'Other (specify)')], max_length=30, verbose_name='How did patient get to enrollment clinic visit?')),
                ('enrollment_visit_method_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('slh_travel', models.CharField(help_text='Use referral clinic name', max_length=50, verbose_name='If you had to travel to (referral facility) to see a doctor, how would you go about it?')),
                ('tests_ordered', models.CharField(choices=[('ordered', 'Yes, ordered'), ('ordered_and_resulted', 'Yes, ordered and resulted'), ('resulted', 'Resulted'), ('No', 'No'), ('unsure', 'Unsure')], max_length=20, verbose_name='Does patient report any tests being ordered or done at or since enrollment visit?')),
                ('next_appointment_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_is_future], verbose_name='Next appointment date (per patient report)')),
                ('next_ap_facility', models.CharField(choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], help_text='per patient report', max_length=40, verbose_name='Next appointment facility')),
                ('next_ap_facility_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('next_ap_facility_unit', models.CharField(choices=[('OPD', 'OPD'), ('A&E', 'A&E'), ('IDCC', 'IDCC'), ('N/A', 'Not applicable'), ('OTHER', 'Other (specify)')], max_length=20)),
                ('next_ap_facility_unit_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If Other, specify ...')),
                ('transport_support', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text='IF YES, COMPLETE TRANSPORT FORM', max_length=3, verbose_name='Has patient expressed need for transport support?')),
                ('comments', models.TextField(blank=True, max_length=100, null=True, verbose_name='Any other general comments regarding patient encouter')),
                ('initial_call_end_time', models.TimeField(verbose_name='End of patient initial call (timestamp)')),
                ('call_duration', models.DurationField(verbose_name='Duration of patient initial call')),
                ('patient_residence', models.ManyToManyField(blank=True, max_length=30, to='potlako_subject.PatientResidence', verbose_name='Who does the patient stay with?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('sms_platform', models.ManyToManyField(blank=True, max_length=35, to='potlako_subject.SmsPlatform', verbose_name='If yes, which Potlako+ messaging platform did you receive?')),
                ('source_of_info', models.ManyToManyField(blank=True, to='potlako_subject.SourceOfInfo', verbose_name='Where or who did you hear about Potlako+ from ?')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Patient call - Initial',
                'verbose_name_plural': 'Patient call - Initial',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientCallFollowUp',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('encounter_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of research staff encounter')),
                ('start_time', models.TimeField(verbose_name='Patient follow up: start time')),
                ('patient_info_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Any changes to be made to participant residence, contact and or next of kin information since index visit?')),
                ('perfomance_status', models.IntegerField(choices=[(0, '0 - Fully active, able to carry on all pre-disease performance without restriction'), (1, '1 - Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature, e.g., light house work, office work'), (2, '2 - Ambulatory and capable of all selfcare but unable to carry out any work activities; up and about more than 50% of waking hours'), (3, '3 - Capable of only limited selfcare; confined to bed or chair more than 50% of waking hours'), (4, '4 - Completely disabled; cannot carry on any selfcare; totally confined to bed or chair'), (5, '5 - Dead')], default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Patient performance status')),
                ('pain_score', models.CharField(choices=[('0_no_pain', '0 No pain'), ('1_3_mild', '1-3 mild pain'), ('4_6_moderate', '4-6 moderate pain'), ('7_10_severe', '7-10 severe pain')], default='0_no_pain', max_length=15, verbose_name='Patient pain score')),
                ('new_complaints', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient have any new complaints?')),
                ('new_complaints_description', models.TextField(blank=True, max_length=1200, null=True, verbose_name='If yes, please describe')),
                ('interval_visit', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If yes, details should be verified with clinician at next clinician check-in call and reconciled with clinician call encounter records', max_length=3, verbose_name='Has there been an interval visit(s) to any facility(s) since the enrollment visit?')),
                ('facility_visited_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='How many facilities were visited?')),
                ('last_visit_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='When was your last interval visit to facility?')),
                ('last_visit_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the last visit date estimated?')),
                ('last_visit_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date was estimated, if any?')),
                ('last_visit_facility', models.CharField(blank=True, max_length=30, null=True, verbose_name='Which health facility did the patient go to on last visit?')),
                ('appt_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name="Since we last talked, has the patient's appointment changed?")),
                ('appt_change_reason', models.CharField(blank=True, choices=[('providers_changed_appt', 'Providers changed appointment date'), ('missed_appointment', 'I missed the appointment'), ('changed_appointment', 'I contacted clinic to change the appointment date'), ('OTHER', 'Other (specify)')], max_length=30, null=True, verbose_name='If yes, how was the appointment changed?')),
                ('appt_change_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('investigations_ordered', models.CharField(choices=[('ordered', 'Yes, ordered'), ('ordered_and_resulted', 'Yes, ordered and resulted'), ('resulted', 'Resulted'), ('No', 'No'), ('unsure', 'Unsure')], help_text="(IF YES, COMPLETE 'INVESTIGATION FORM')", max_length=20, verbose_name='Have there been any interval investigations ordered or resulted?')),
                ('transport_support', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('already_on_transport_support', 'Already on transport support')], help_text="(IF YES, COMPLETE 'TRANSPORT FORM')", max_length=30, verbose_name='Does the patient need transport support?')),
                ('next_appointment_date', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='Next appointment date (per patient report)')),
                ('next_ap_facility', models.CharField(choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=40, verbose_name='Next appointment facility and type')),
                ('next_ap_facility_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('transport_support_received', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='e.g. funds transferred, vehicle arrived, etc.', max_length=3, verbose_name='Did patient receive expected transportation support for his/her last visit?')),
                ('transport_details', models.TextField(blank=True, max_length=1200, null=True, verbose_name='Please provide details')),
                ('clinician_communication_issues', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name="Has there been any issues in communicating with clinicians, or with the patient's care in general?")),
                ('clinician_issues_details', models.TextField(blank=True, max_length=1200, null=True, verbose_name='Please provide details')),
                ('communication_issues', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has there been any issues in communicating with research team?')),
                ('issues_details', models.TextField(blank=True, max_length=1200, null=True, verbose_name='Please provide details')),
                ('other_issues', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has there been any other issues?')),
                ('other_issues_details', models.TextField(blank=True, max_length=1200, null=True, verbose_name='Please provide details')),
                ('call_achievements_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('medical_evaluation_understanding', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does patient have fair understanding of next steps regarding medical evaluation?')),
                ('next_step_understanding', models.TextField(max_length=1200, verbose_name="Give a detailed summary of the pateint's understanding of the next steps (details)")),
                ('sms_received', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=3, verbose_name='Did patient receive SMS reminder for last scheduled visit?')),
                ('sms_outcome', models.CharField(choices=[('patient_sent_sms_received', 'SMS sent to patient and receipt confirmed'), ('patient_sent_sms_not_received', 'SMS sent to patient and receipt NOT confirmed'), ('kin1_sent_sms_received', 'SMS sent to next of kin 1 and receipt confirmed'), ('kin1_sent_sms_not_received', 'SMS sent to next of kin 1 and receipt NOT confirmed'), ('kin2_sent_sms_received', 'SMS sent to next of kin 2 and receipt confirmed'), ('kin2_sent_sms_not_received', 'SMS sent to next of kin 2 and receipt NOT confirmed'), ('OTHER', 'Other, specify'), ('N/A', 'N/A')], max_length=50, verbose_name='Outcome of reminder SMS')),
                ('sms_outcome_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('additional_comments', models.TextField(blank=True, max_length=1200, null=True, verbose_name='Provide any additional comments')),
                ('patient_followup_end_time', models.TimeField(verbose_name='Patient follow up: end time')),
                ('encounter_duration', models.DurationField(help_text='Minutes', verbose_name='Duration of encounter')),
                ('call_achievements', models.ManyToManyField(to='potlako_subject.CallAchievements', verbose_name='What has been achieved during the call')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Patient call - FollowUp',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NavigationSummaryAndPlan',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('diagnostic_plan', models.TextField(max_length=500)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Navigation Plan And Summary',
                'verbose_name_plural': 'Navigation Plan And Summaries',
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='MissedVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Report date and time')),
                ('missed_visit_date', models.DateField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of reference missed visit (visit previously scheduled that patient missed)')),
                ('facility_scheduled', models.CharField(choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=40, verbose_name='Facility where missed appointment was scheduled')),
                ('facility_scheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('visit_type', models.CharField(choices=[('referral', 'Referral'), ('return', 'Return')], max_length=10, verbose_name='Type of visit missed')),
                ('determine_missed', models.CharField(choices=[('referenced_database', 'Research staff referenced database and contacted clinician/facility'), ('clinic_register', 'Clinician referenced clinic register and contacted research staff'), ('clinician_contacted', 'Patient contacted clinician'), ('research_staff_contacted', 'Patient contacted research staff'), ('OTHER', 'Other (specify)')], max_length=25, verbose_name='How did the research team know about the missed visit?')),
                ('determine_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If Other, specify ...')),
                ('inquired', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was patient or next of kin called to enquire about the missed visit?')),
                ('not_inquired_reason', models.CharField(blank=True, choices=[('referenced_database', 'Research staff referenced database and contacted clinician/facility'), ('clinic_register', 'Clinician referenced clinic register and contacted research staff'), ('clinician_contacted', 'Patient contacted clinician'), ('research_staff_contacted', 'Patient contacted research staff'), ('OTHER', 'Other (specify)')], max_length=25, null=True, verbose_name='If no above, what was the reason?')),
                ('not_inquired_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If Other, specify ...')),
                ('inquired_from', models.CharField(blank=True, choices=[('patient_called', 'Patient called (phone answered)'), ('kin1_called', 'Next of kin 1 called (phone answered) after patient called (NO answer, SMS sent)'), ('kin2_called', 'Next of kin 2 called (phone answered) after patient and next of kin 1 called (NO answer for both, SMS sent to both)'), ('unreachable', 'Unable to reach patient or next of kin')], max_length=20, null=True, verbose_name='Who was the phone call to?')),
                ('reason_missed', models.CharField(choices=[('no_appointment_knowledge', 'Did not know about appointment'), ('forgot_appointment', 'Did not remember appointment date'), ('no_transport_fare', 'Could not afford transport fee'), ('no_access_to_transport', 'Did not have access to transportation'), ('different_facility', 'Went to a different facility'), ('felt_better', 'Did not think they had to come in because feeling better'), ('didnt_think_theyd_get_help', 'Did not wish to return because they did not think they would get help'), ('deceased', 'Patient deceased'), ('OTHER', 'Other (specify)')], max_length=30, verbose_name='Reason for missed visit')),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other, describe reason for missed visit')),
                ('next_appointment_date', models.DateField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.date_is_future], verbose_name='Date of next appointment')),
                ('next_ap_facility', models.CharField(choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=40, verbose_name='Facility at next appointment')),
                ('next_ap_facility_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('next_ap_type', models.CharField(choices=[('referral', 'Referral'), ('return', 'Return')], max_length=10, verbose_name='Type of next appointment')),
                ('home_visit', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='(After 3 patient and 3 next of kin phone attempts made)', max_length=3, verbose_name='Should home visit be arranged?')),
                ('transport_need', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has patient expressed need for transportation?')),
                ('transport_support', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=3, verbose_name='Is the patient already receiving transport support?')),
                ('trans_support_comments', models.TextField(blank=True, max_length=150, null=True, verbose_name='If no above, please explain.')),
                ('clinician_designation', models.CharField(blank=True, choices=[('med_officer', 'Medical Officer'), ('nurse', 'Nurse'), ('smo/cmo', 'SMO/CMO'), ('research_team', 'Research team'), ('OTHER', 'Other type (specify)')], max_length=50, null=True, verbose_name='What is the designation of the clinician that research staff discussed missed visit with')),
                ('clinician_designation_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('comments', models.TextField(blank=True, help_text='(Note that this form may involve multiple phonecalls (e.g. with clinician, patient and thenclinician again))', max_length=150, null=True, verbose_name='Any other general comments about missed visit encounter?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Missed Visit',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MissedCall',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('is_complete', models.BooleanField(blank=True, null=True)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Missed Call',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MedicalDiagnosis',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Medical Diagnosis',
                'verbose_name_plural': 'Medical Diagnoses',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InvestigationsResulted',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('tests_resulted_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('pathology_tests', models.CharField(blank=True, max_length=150, null=True, verbose_name='If pathology, please specify')),
                ('imaging_tests', models.CharField(blank=True, max_length=150, null=True, verbose_name='If imaging, please specify')),
                ('pathology_specimen_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date pathology specimen taken')),
                ('pathology_nhl_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date pathology specimen received at NHL')),
                ('pathology_result_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date pathology results reported')),
                ('pathology_received_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date pathology results received by clinician')),
                ('pathology_communicated_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date pathology results communicated to patient')),
                ('imaging_tests_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date imaging test performed (completed)')),
                ('specimen_tracking_notes', models.TextField(blank=True, max_length=100, null=True, verbose_name='Path specimen tracking notes')),
                ('diagnosis_results', models.CharField(choices=[('malignant', 'Malignant'), ('non_malignant', 'Non Malignant'), ('inconclusive', 'Inconclusive'), ('untraceable', 'Untraceable'), ('suggestive', 'Suggestive'), ('OTHER', 'Other (specify)')], max_length=20, verbose_name='Diagnosis results (provider)')),
                ('diagnosis_results_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('cancer_type', models.CharField(blank=True, max_length=15, null=True, verbose_name='If cancer, type of cancer diagnosed')),
                ('diagnoses_made', models.CharField(blank=True, max_length=15, null=True, verbose_name='If not cancer, diagnosis made')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.subjectvisit')),
                ('tests_resulted_type', models.ManyToManyField(to='potlako_subject.TestsOrderedType', verbose_name='What tests are being resulted?')),
            ],
            options={
                'verbose_name': 'Investigations - Resulted',
                'verbose_name_plural': 'Investigations - Resulted',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InvestigationsOrdered',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('tests_ordered_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('facility_ordered', models.CharField(blank=True, choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=40, null=True, verbose_name='Facility where labs were ordered')),
                ('facility_ordered_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('ordered_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date of clinic visit where labs were ordered')),
                ('ordered_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the ordered date estimated?')),
                ('ordered_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('pathology_test_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('biopsy_specify', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If biopsy, specify site')),
                ('fna_location', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If FNA, please indicate location')),
                ('xray_tests', models.CharField(blank=True, max_length=25, null=True, verbose_name='If XRay tests ordered, specify')),
                ('ultrasound_tests', models.CharField(blank=True, max_length=25, null=True, verbose_name='If ultrasound tests ordered, specify')),
                ('ct_tests', models.CharField(blank=True, max_length=25, null=True, verbose_name='If CT tests ordered, specify')),
                ('mri_tests', models.CharField(blank=True, max_length=25, null=True, verbose_name='If MRI tests ordered, specify')),
                ('imaging_tests_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If other tests ordered, specify')),
                ('imaging_test_type', models.ManyToManyField(blank=True, to='potlako_subject.ImagingTestType')),
                ('pathology_test', models.ManyToManyField(blank=True, to='potlako_subject.PathologyTest', verbose_name='Type of pathology test')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.subjectvisit')),
                ('tests_ordered_type', models.ManyToManyField(to='potlako_subject.TestsOrderedType', verbose_name='What tests were ordered?')),
            ],
            options={
                'verbose_name': 'Investigations - Ordered',
                'verbose_name_plural': 'Investigations - Ordered',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HomeVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('clinician_type', models.CharField(choices=[('med_officer', 'Medical Officer'), ('nurse', 'Nurse'), ('smo/cmo', 'SMO/CMO'), ('research_team', 'Research team'), ('OTHER', 'Other type (specify)')], max_length=50, verbose_name='Type of clinician who made the home visit')),
                ('clinician_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('clinician_facility', models.CharField(blank=True, choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=40, null=True, verbose_name='Name of facility where clinician works')),
                ('clinician_facility_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('visit_outcome', models.CharField(choices=[('alive', 'Patient alive (specify)'), ('dead', 'Patient died'), ('ltfu', 'Patient lost to follow up'), ('OTHER', 'Other (specify)')], help_text="(IF DIED, COMPLETE 'DEATH FORM'.IF LTFU,COMPLETE 'EXIT FORM')", max_length=30, verbose_name='Outcome of home visit')),
                ('visit_outcome_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('next_appointment', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_is_future], verbose_name='If alive, next appointment date')),
                ('next_ap_facility', models.CharField(blank=True, choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=40, null=True, verbose_name='If alive, next appointment facility')),
                ('next_ap_facility_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('next_ap_type', models.CharField(blank=True, choices=[('referral', 'Referral'), ('return', 'Return')], max_length=8, null=True, verbose_name='If alive, next appointment type')),
                ('general_comments', models.TextField(blank=True, max_length=150, null=True, verbose_name='General comments on home visit (including if patient alive reasons for missing appointments)')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Home Visit',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalVerbalConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('version', models.CharField(max_length=10, verbose_name='Consent version')),
                ('screening_identifier', models.CharField(db_index=True, max_length=36, verbose_name='Screening Identifier')),
                ('subject_identifier', models.CharField(blank=True, max_length=50, null=True, verbose_name='Subject Identifier')),
                ('file', models.TextField(max_length=100)),
                ('user_uploaded', models.CharField(max_length=50, verbose_name='user uploaded')),
                ('datetime_captured', models.DateTimeField(default=edc_base.utils.get_utcnow)),
                ('language', models.CharField(choices=[('tn', 'Setswana'), ('en', 'English'), ('kck', 'Ikalanga')], max_length=25, verbose_name='Language of consent')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Potlako+ Verbal Consent',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSymptomsAndCareSeekingEndpoint',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('cancer_symptom_date', models.DateField(verbose_name='Date of first possible cancer symptom awareness')),
                ('cancer_symptom_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the awareness date estimated?')),
                ('cancer_symptom_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('discussion_date', models.DateField(verbose_name='Date of first discussion with someone')),
                ('discussion_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the discussion date estimated?')),
                ('discussion_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('seek_help_date', models.DateField(verbose_name='Date that participant decided to seek help for possible cancer symptom from clinic or hospital')),
                ('seek_help_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the seeking help date estimated?')),
                ('seek_help_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('first_seen_date', models.DateField(verbose_name='Date that participant was first seen at the clinic or for possible cancer symptom')),
                ('first_seen_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the first first seen date estimated?')),
                ('first_seen_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Care Seeking Endpoint',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSymptomAssessment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('symptom', models.CharField(max_length=50)),
                ('symptom_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future])),
                ('last_visit_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the symptom date estimated?')),
                ('last_visit_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date was estimated, if any?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('symptom_care_seeking', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='potlako_subject.symptomandcareseekingassessment')),
            ],
            options={
                'verbose_name': 'historical Symptom Assessment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason_unscheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'Missed' above, provide the reason the scheduled visit was missed")),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason', models.CharField(choices=[('initial_visit/contact', 'Initial visit/contact'), ('fu_visit/contact', 'Follow up visit/contact'), ('unscheduled_visit/contact', 'Unscheduled visit/contact'), ('missed_visit', 'Missed visit'), ('death', 'Death'), ('off study', 'Off study (use only when taking subject off study)'), ('deferred', 'Deferred')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_unscheduled', models.CharField(choices=[('routine_oncology', 'Routine oncology clinic visit (i.e. planned chemo, follow-up)'), ('ill_oncology', 'Ill oncology clinic visit'), ('patient_called', 'Patient called to come for visit'), ('N/A', 'Not Applicable'), ('OTHER', 'Other, specify:')], default='N/A', max_length=50, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('info_source', models.CharField(choices=[('clinic_visit', 'Clinic visit with participant'), ('other_contact_subject', 'Other contact with participant (i.e telephone call)'), ('contact_health worker', 'Contact with health care worker'), ('contact_family/designated_person', 'Contact with family or designated person who can provide information'), ('OTHER', 'Other,specify')], max_length=40, verbose_name='What is the main source of this information?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('appointment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edc_appointment.appointment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Subject Visit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectScreening',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('screening_identifier', models.CharField(db_index=True, max_length=36, verbose_name='Screening Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('enrollment_interest', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('deceased', 'Deceased')], max_length=8, verbose_name='Does the patient want to be enrolled into the study?')),
                ('disinterest_reason', models.CharField(blank=True, choices=[('dont_want_to_participate', "I don't want to be part of a study"), ('dont_think_I_have_cancer', "I don't think I have cancer"), ('partner_doesnt_want_to_participate', "My partner doesn't want me to participate"), ('OTHER', 'Other (specify)')], max_length=50, null=True, verbose_name='If no, reason patient does not wish to enroll into the study')),
                ('disinterest_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('residency', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='Does the potential participant spend or intend to spend atleast 14 nights per month in the study community?')),
                ('nationality', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='Is the potential participant a Botswana citizen?')),
                ('has_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'NO' STOP patient cannot be enrolled )", max_length=3, verbose_name='Is the potential participant a cancer suspect? ')),
                ('age_in_years', models.IntegerField(help_text='(Years)', verbose_name='Patient age')),
                ('enrollment_site', models.CharField(choices=[('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('otse_clinic', 'Otse clinic'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('oodi_clinic', 'Oodi clinic'), ('bokaa_clinic', 'Bokaa clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('sheleketla_clinic', 'Sheleketla clinic'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('lerala_clinic', 'Lerala clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('sefophe_clinic', 'Sefophe clinic'), ('mmadinare_primary_hospital', 'Mmadinare Primary Hospital'), ('manga_clinic', 'Manga clinic'), ('mandunyane_clinic', 'Mandunyane clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('nata_clinic', 'Nata clinic'), ('OTHER', 'Other (specify)')], help_text='Hospital where subject is recruited', max_length=50, null=True)),
                ('enrollment_site_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('is_eligible', models.BooleanField(default=False, editable=False)),
                ('ineligibility', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason not eligible')),
                ('is_consented', models.BooleanField(default=False, editable=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Potlako+ Eligibility',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectLocator',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('action_identifier', models.CharField(max_length=25, null=True)),
                ('tracking_identifier', models.CharField(max_length=30, null=True)),
                ('related_tracking_identifier', models.CharField(max_length=30, null=True)),
                ('parent_tracking_identifier', models.CharField(max_length=30, null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('may_call', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission <b>to contacted by telephone or cell</b> by study staff for follow-up purposes during the study?')),
                ('may_visit_home', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission for study staff <b>to make home visits</b> for follow-up purposes?')),
                ('may_sms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given permission <b>to be contacted by SMS</b> by study staff for follow-up purposes during the study?')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Mailing address ')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Physical address with detailed description')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_contact_indirectly', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given permission for study staff <b>to contact anyone else</b> for follow-up purposes during the study?')),
                ('indirect_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('indirect_contact_relation', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('indirect_contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Full physical address ')),
                ('indirect_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('indirect_contact_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternative)')),
                ('indirect_contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Work contact telephone')),
                ('subject_work_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Work contact cell number')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow)),
                ('date_signed', models.DateField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date Locator Form signed ')),
                ('local_clinic', models.CharField(help_text='Please give clinic code.', max_length=75, verbose_name='Which health facility do you normally go to, in this village?')),
                ('home_village', models.CharField(max_length=75, verbose_name='Where is your home village?')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include firstname and lastname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('doesnt_work', 'Does not work')], max_length=25, verbose_name='Has the participant given permission to contacted <b>at work</b> by telephone or cell by study staff for follow-up purposes during the study?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Subject Locator',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSMS',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('date_time_form_filled', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date SMS form filled')),
                ('next_ap_date', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='Date of next appointment (referral or return)')),
                ('date_reminder_sent', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date visit reminder SMS sent')),
                ('sms_outcome', models.CharField(choices=[('sms_sent', 'SMS sent'), ('sms_not_sent', 'SMS not sent')], max_length=50, verbose_name='Outcome of reminder SMS')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical SMS',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPreviousFacilityVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('facility_visited', models.CharField(blank=True, choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], help_text='(select all that apply)', max_length=40, verbose_name='Which facilities has the patient been seen for similar symptoms?')),
                ('facility_visited_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=30, null=True, verbose_name='If Other, specify ...')),
                ('previous_facility_period', models.CharField(blank=True, help_text='specify variable (days, weeks, months, years)', max_length=15, null=True, verbose_name='For how long was he/she seen at facilities before enrollment visit?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient_call_initial', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='potlako_subject.patientcallinitial')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical previous facility visit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOnSchedule',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('onschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future])),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('community_arm', models.CharField(blank=True, max_length=25, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical on schedule',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalNextOfKin',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('kin_lastname', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Next of kin Surname')),
                ('kin_firstname', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Next of kin First name')),
                ('kin_relationship', models.CharField(choices=[('spouse', 'Spouse'), ('child', 'Child'), ('parent', 'Parent'), ('sibling', 'Sibling'), ('grandparents', 'Grandparents'), ('grandchild', 'Grandchild'), ('OTHER', 'Other')], max_length=20, verbose_name='Next of kin relationship')),
                ('kin_relation_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other, describe next of kin relationship')),
                ('kin_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Next of kin cellphone number')),
                ('kin_telephone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Next of kin telephone number')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('clinician_call_enrollemt', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='potlako_subject.cliniciancallenrollment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Next Of Kin',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalNavigationSummaryAndPlan',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('diagnostic_plan', models.TextField(max_length=500)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Navigation Plan And Summary',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMissedCallRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('notes', models.TextField(max_length=150)),
                ('repeat_call', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='Scheduled date for repeat call')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('missed_call', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='potlako_subject.missedcall')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Missed Call Record',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMedicalConditions',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('medical_condition', models.CharField(choices=[('cardiac_condition', 'Cardiac Condition'), ('metabolic_disease', 'Metabolic Disease'), ('respiratory_disease', 'Respiratory Disease'), ('neurological_disease', 'Neurological Disease'), ('musculoskeletal_disease', 'Muscoloskeletal Disease'), ('skin_disease', 'Skin Disease'), ('psychiatric_condition', 'Psychiatric Condition'), ('genitourinary_disease', 'Genitourinary Disease'), ('gastroenterological_disease', 'Gastroenterological Disease'), ('OTHER', 'Other (Specify)')], max_length=30, verbose_name='Which serious medical condition(s) does the patient have?')),
                ('medical_condition_specify', models.CharField(max_length=35, verbose_name='Specific diagnosis')),
                ('medical_condition_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('diagnosis_date', models.DateField(max_length=40, validators=[edc_base.model_validators.date.date_not_future], verbose_name='When was the patient diagnosed?')),
                ('diagnosis_date_estimate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the diagnosis date an estimate?')),
                ('diagnosis_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='If diagnoses date was estimated, which part of the date was estimated?')),
                ('on_medication', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=7, verbose_name='Is the patient of medication?')),
                ('treatment_type', models.CharField(blank=True, choices=[('atleast_once_a_month', 'Atleast once a month'), ('1-3_months', '1-3 months'), ('every_3-6_months', 'Every 3-6 months'), ('once_or_twice_a_year', 'Once or twice a year'), ('OTHER', 'Other (specify)')], max_length=20, null=True, verbose_name='how often does the participant see a doctor/nurse for their condition?')),
                ('treatment_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('medical_diagnosis', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='potlako_subject.medicaldiagnosis')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Medical Conditions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLabTest',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('lab_test_type', models.CharField(choices=[('FBC', 'FBC'), ('RFT', 'RFT'), ('LFT', 'LFT'), ('HIV', 'HIV'), ('WBC', 'WBC'), ('Hb', 'Hb'), ('Plt', 'Plt'), ('Cr', 'Cr'), ('K', 'K'), ('Na', 'Na'), ('Glu', 'Glu'), ('pap_smear', 'Pap Smear'), ('OTHER', 'Other lab test (specify)')], help_text='(IF PATIENT CALL, ONLY ASK ABOUT RFT, FBC, LFT )', max_length=25, verbose_name='Type of lab test.')),
                ('lab_test_date', models.DateField(verbose_name='Date of lab test.')),
                ('lab_test_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other lab test, specify')),
                ('lab_test_status', models.CharField(choices=[('ordered', 'Ordered'), ('specimen_taken', 'Specimen taken'), ('specimen_logged_ipms', 'Specimen logged into IPMS'), ('specimen_recieved_nhl', 'Specimen received at NHL (for pathology only)'), ('results_available_ipms', 'Results available on IPMS'), ('results_available_paper', 'Results available on paper'), ('OTHER', 'Other (specify)')], max_length=50, verbose_name='Type of lab test.')),
                ('lab_test_status_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other lab test results status, specify details')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('investigations', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='potlako_subject.investigationsordered')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical lab test',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFacilityVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('interval_visit_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date of interval visit')),
                ('interval_visit_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the interval visit date estimated?')),
                ('interval_visit_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date was estimated, if any?')),
                ('visit_facility', models.CharField(choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=40, verbose_name='What facility was visited (per patient report)?')),
                ('visit_facility_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('visit_reason', models.CharField(blank=True, max_length=50, null=True, verbose_name='What was the reason for the visit?')),
                ('visit_outcome', models.CharField(choices=[('return', 'Return'), ('refer', 'Refer'), ('discharge', 'Discharge')], max_length=15, verbose_name='What was the outcome of the visit?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient_call_followup', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='potlako_subject.patientcallfollowup')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Facility Visit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEvaluationTimeline',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('key_step', models.CharField(max_length=50, verbose_name='Key step')),
                ('target_date', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='Target Date')),
                ('key_step_status', models.CharField(choices=[('done', 'Done'), ('not_done', 'Not Done')], max_length=8, verbose_name='Key step status')),
                ('completion_date', models.DateField(blank=True, help_text='or date determined not required', null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Achieved date')),
                ('review_required', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Requires multidisiciplinary review?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('navigation_plan', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='potlako_subject.navigationsummaryandplan')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Evaluation Timeline',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCancerDxAndTxEndpoint',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('cancer_evaluation', models.CharField(choices=[('complete', 'Complete'), ('unable_to_complete', 'Incomplete, but unable to complete (i.e. death, refusal)'), ('incomplete_ongoing_evaluation', 'Incomplete, ongoing evaluation'), ('incomplete_12_months', 'Incomplete, 12 month visit')], max_length=30)),
                ('diagnosis_date', models.DateField(blank=True, null=True, verbose_name='If complete, date of final diagnosis')),
                ('diagnosis_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the diagnosis date estimated?')),
                ('diagnosis_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('clinical_impression', models.CharField(choices=[('confirmed_cancer', 'Confirmed cancer'), ('probable_cancer', 'Probably cancer'), ('possible_not_cancer', 'Possible not cancer'), ('probable_not_cancer', 'Probable not cancer'), ('no_alternative_diagnosis', 'No alternative diagnosis'), ('confirmed_not_cancer', 'Confirmed not cancer'), ('alternative_diagnosis', 'Alternative diagnosis')], max_length=30, verbose_name='Final clinical impression')),
                ('final_cancer_diagnosis', models.CharField(blank=True, choices=[('cervical', 'Cervical Cancer'), ('breast', 'Breast Cancer'), ('head_n_neck', 'Head and Neck Cancer'), ('non_hodgkin_lymph', 'Non-Hodgkin Lymphoma'), ('hodgkin_lymph', 'Hodgkin Lymphoma'), ('oesophageal', 'Oesophageal Cancer'), ('vaginal', 'Vulvar/Vaginal Cancer'), ('anal', 'Anal Cancer'), ('kaposis_sarcoma', "Kaposi's sarcoma"), ('penile', 'Penile Cancer'), ('prostate', 'Prostate Cancer'), ('colorectal', 'Colorectal Cancer'), ('OTHER', 'Other')], max_length=30, null=True, verbose_name='If confirmed/probable cancer, final cancer diagnosis')),
                ('final_cancer_diagnosis_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=30, null=True, verbose_name='Final Cancer Diagnosis, Other')),
                ('non_cancer_diagnosis', models.CharField(blank=True, choices=[('fibroadenoma', 'Fibroadenoma'), ('breast_cyst', 'Breast cyst'), ('breast_abscess', 'Breast Abscess'), ('tb', 'Tuberculosis'), ('skin_ulcer', 'Non-healing skin ulcer'), ('pre_cancerous_lesion', 'Cervical pre-cancerous lesion'), ('no_alt_diagnosis_est', 'No alternative diagnosis established'), ('OTHER', 'Other')], max_length=25, null=True, verbose_name='Final Non-Cancer diagnosis')),
                ('non_cancer_diagnosis_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=30, null=True, verbose_name='Final Non-Cancer Diagnosis, Other')),
                ('cancer_diagnosis', models.CharField(blank=True, max_length=2, null=True, verbose_name='Cancer diagnosis')),
                ('cancer_histology_code', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2999)])),
                ('cancer_diagnosis_stage', models.CharField(blank=True, choices=[('limited_stage', 'Limited stage'), ('advanced_stage', 'Advancced stage'), ('unknown', 'unknown')], max_length=15, null=True, verbose_name='Cancer stage at diagnosis')),
                ('tumor_stage', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)], null=True, verbose_name='AJCC tumor stage')),
                ('nodal_stage', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)], null=True, verbose_name='AJCC nodal stage')),
                ('distant_metastasis_stage', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2)], null=True, verbose_name='AJCC distant metastasis stage')),
                ('cancer_therapy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Has patient received cancer-specific therapy?')),
                ('treatment_intent', models.CharField(blank=True, choices=[('curative', 'Curative'), ('palliative', 'Palliative'), ('uncertain', 'Uncertain')], max_length=10, null=True, verbose_name='Intent of cancer treatment')),
                ('therapeutic_surgery', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Has patient received therapeutic surgery?')),
                ('surgery_date', models.DateField(blank=True, null=True, verbose_name='If yes, date of surgery')),
                ('surgery_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the surgery date estimated?')),
                ('surgery_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('chemotherapy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Has patient received chemotherapy?')),
                ('chemotherapy_date', models.DateField(blank=True, null=True, verbose_name='If yes, date of chemotherapy')),
                ('chemotherapy_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the chemotherapy date estimated?')),
                ('chemotherapy_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('radiation', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Has patient received radiation?')),
                ('radiation_date', models.DateField(blank=True, null=True, verbose_name='If yes, date of radiation')),
                ('radiation_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the radiation date estimated?')),
                ('radiation_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Cancer Diagnosis And Treatment Assessment - Endpoint Recording',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBaselineRoadMap',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Report Time and Date')),
                ('investigations_turnaround_time', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='What is the investigations turn-around time?')),
                ('specialty_clinic', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient need a specialty clinic?')),
                ('specialist_clinic_type', models.CharField(blank=True, choices=[('ENT', 'ENT'), ('urology', 'Urology'), ('surgical', 'Surgical'), ('gynecology', 'Gynecology'), ('dermatology', 'Dermatology'), ('anal', 'Anal'), ('OTHER', 'Other, specify')], max_length=15, null=True, verbose_name='If yes, which specialist clinic?')),
                ('specialist_clinic_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('specialist_turnaround_time', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_is_future], verbose_name='What is the specialist clinic turn-around time?')),
                ('results_review_personnel', models.CharField(choices=[('M.O', 'M.O'), ('physician', 'Physician'), ('surgeon', 'Surgeon'), ('OTHER', 'Other (specify)')], max_length=10, verbose_name="Who is responsible for next patient's appointment/results review?")),
                ('results_review_personnel_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('review_turnaround_time', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='What is the results review turn-around time?')),
                ('oncology_visit', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='When is the expected oncology visit?')),
                ('oncology_turnaround_time', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='What is the oncology visit turn-around time?')),
                ('treatment_initiation_visit', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='When is the expected treatment initiation visit?')),
                ('treatment_initiation_turnaround_time', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='What is the treatment initiation visit turn-around time?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Baseline Road Map',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBaselineClinicalSummary',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Time and Date')),
                ('symptoms_summary', models.TextField(max_length=1000, verbose_name='Summary of presenting symptoms and clinical impression')),
                ('cancer_concern', models.CharField(choices=[('cervical', 'Cervical Cancer'), ('breast', 'Breast Cancer'), ('head_n_neck', 'Head and Neck Cancer'), ('non_hodgkin_lymph', 'Non-Hodgkin Lymphoma'), ('hodgkin_lymph', 'Hodgkin Lymphoma'), ('oesophageal', 'Oesophageal Cancer'), ('vaginal', 'Vulvar/Vaginal Cancer'), ('anal', 'Anal Cancer'), ('kaposis_sarcoma', "Kaposi's sarcoma"), ('penile', 'Penile Cancer'), ('prostate', 'Prostate Cancer'), ('colorectal', 'Colorectal Cancer'), ('OTHER', 'Other')], max_length=20, verbose_name='Cancer of greatest concern')),
                ('cancer_concern_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('cancer_probability', models.CharField(choices=[('low', 'Low, cancer possible but other conditions are much more likely'), ('moderate', 'Moderate, cancer is among the most likely causes of the symptoms/signs'), ('high', 'High, cancer is the leading suspected cause of the symptoms/signs')], max_length=8)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Baseline Clinical Summary',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='cliniciancallenrollment',
            name='symptoms',
            field=models.ManyToManyField(help_text='(select all that apply)', to='potlako_subject.Symptoms', verbose_name='Presenting symptom(s)'),
        ),
        migrations.CreateModel(
            name='CancerDxAndTxEndpoint',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('cancer_evaluation', models.CharField(choices=[('complete', 'Complete'), ('unable_to_complete', 'Incomplete, but unable to complete (i.e. death, refusal)'), ('incomplete_ongoing_evaluation', 'Incomplete, ongoing evaluation'), ('incomplete_12_months', 'Incomplete, 12 month visit')], max_length=30)),
                ('diagnosis_date', models.DateField(blank=True, null=True, verbose_name='If complete, date of final diagnosis')),
                ('diagnosis_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the diagnosis date estimated?')),
                ('diagnosis_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('clinical_impression', models.CharField(choices=[('confirmed_cancer', 'Confirmed cancer'), ('probable_cancer', 'Probably cancer'), ('possible_not_cancer', 'Possible not cancer'), ('probable_not_cancer', 'Probable not cancer'), ('no_alternative_diagnosis', 'No alternative diagnosis'), ('confirmed_not_cancer', 'Confirmed not cancer'), ('alternative_diagnosis', 'Alternative diagnosis')], max_length=30, verbose_name='Final clinical impression')),
                ('final_cancer_diagnosis', models.CharField(blank=True, choices=[('cervical', 'Cervical Cancer'), ('breast', 'Breast Cancer'), ('head_n_neck', 'Head and Neck Cancer'), ('non_hodgkin_lymph', 'Non-Hodgkin Lymphoma'), ('hodgkin_lymph', 'Hodgkin Lymphoma'), ('oesophageal', 'Oesophageal Cancer'), ('vaginal', 'Vulvar/Vaginal Cancer'), ('anal', 'Anal Cancer'), ('kaposis_sarcoma', "Kaposi's sarcoma"), ('penile', 'Penile Cancer'), ('prostate', 'Prostate Cancer'), ('colorectal', 'Colorectal Cancer'), ('OTHER', 'Other')], max_length=30, null=True, verbose_name='If confirmed/probable cancer, final cancer diagnosis')),
                ('final_cancer_diagnosis_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=30, null=True, verbose_name='Final Cancer Diagnosis, Other')),
                ('non_cancer_diagnosis', models.CharField(blank=True, choices=[('fibroadenoma', 'Fibroadenoma'), ('breast_cyst', 'Breast cyst'), ('breast_abscess', 'Breast Abscess'), ('tb', 'Tuberculosis'), ('skin_ulcer', 'Non-healing skin ulcer'), ('pre_cancerous_lesion', 'Cervical pre-cancerous lesion'), ('no_alt_diagnosis_est', 'No alternative diagnosis established'), ('OTHER', 'Other')], max_length=25, null=True, verbose_name='Final Non-Cancer diagnosis')),
                ('non_cancer_diagnosis_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=30, null=True, verbose_name='Final Non-Cancer Diagnosis, Other')),
                ('cancer_diagnosis', models.CharField(blank=True, max_length=2, null=True, verbose_name='Cancer diagnosis')),
                ('cancer_histology_code', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2999)])),
                ('cancer_diagnosis_stage', models.CharField(blank=True, choices=[('limited_stage', 'Limited stage'), ('advanced_stage', 'Advancced stage'), ('unknown', 'unknown')], max_length=15, null=True, verbose_name='Cancer stage at diagnosis')),
                ('tumor_stage', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)], null=True, verbose_name='AJCC tumor stage')),
                ('nodal_stage', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)], null=True, verbose_name='AJCC nodal stage')),
                ('distant_metastasis_stage', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2)], null=True, verbose_name='AJCC distant metastasis stage')),
                ('cancer_therapy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Has patient received cancer-specific therapy?')),
                ('treatment_intent', models.CharField(blank=True, choices=[('curative', 'Curative'), ('palliative', 'Palliative'), ('uncertain', 'Uncertain')], max_length=10, null=True, verbose_name='Intent of cancer treatment')),
                ('therapeutic_surgery', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Has patient received therapeutic surgery?')),
                ('surgery_date', models.DateField(blank=True, null=True, verbose_name='If yes, date of surgery')),
                ('surgery_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the surgery date estimated?')),
                ('surgery_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('chemotherapy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Has patient received chemotherapy?')),
                ('chemotherapy_date', models.DateField(blank=True, null=True, verbose_name='If yes, date of chemotherapy')),
                ('chemotherapy_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the chemotherapy date estimated?')),
                ('chemotherapy_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('radiation', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Has patient received radiation?')),
                ('radiation_date', models.DateField(blank=True, null=True, verbose_name='If yes, date of radiation')),
                ('radiation_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the radiation date estimated?')),
                ('radiation_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Cancer Diagnosis And Treatment Assessment - Endpoint Recording',
                'verbose_name_plural': 'Cancer Diagnosis And Treatment Assessments - Endpoint Recordings',
                'abstract': False,
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='CancerDxAndTx',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('symptoms_summary', models.TextField(max_length=150, verbose_name='Summary of symptoms and evaluation over the past 6 months')),
                ('cancer_evaluation', models.CharField(choices=[('complete', 'Complete'), ('unable_to_complete', 'Incomplete, but unable to complete (i.e. death, refusal)'), ('incomplete_ongoing_evaluation', 'Incomplete, ongoing evaluation'), ('incomplete_12_months', 'Incomplete, 12 month visit')], max_length=30)),
                ('diagnosis_date', models.DateField(blank=True, null=True, verbose_name='If complete, date of final diagnosis')),
                ('diagnosis_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the diagnosis date estimated?')),
                ('diagnosis_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date is estimated?')),
                ('cancer_treatment', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has patient received any treatment for cancer?')),
                ('treatment_description', models.TextField(blank=True, max_length=200, null=True, verbose_name='If yes, describe treatment and dates for therapies')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Cancer Diagnosis And Treatment Assessment',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaselineRoadMap',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Report Time and Date')),
                ('investigations_turnaround_time', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='What is the investigations turn-around time?')),
                ('specialty_clinic', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient need a specialty clinic?')),
                ('specialist_clinic_type', models.CharField(blank=True, choices=[('ENT', 'ENT'), ('urology', 'Urology'), ('surgical', 'Surgical'), ('gynecology', 'Gynecology'), ('dermatology', 'Dermatology'), ('anal', 'Anal'), ('OTHER', 'Other, specify')], max_length=15, null=True, verbose_name='If yes, which specialist clinic?')),
                ('specialist_clinic_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('specialist_turnaround_time', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_is_future], verbose_name='What is the specialist clinic turn-around time?')),
                ('results_review_personnel', models.CharField(choices=[('M.O', 'M.O'), ('physician', 'Physician'), ('surgeon', 'Surgeon'), ('OTHER', 'Other (specify)')], max_length=10, verbose_name="Who is responsible for next patient's appointment/results review?")),
                ('results_review_personnel_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('review_turnaround_time', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='What is the results review turn-around time?')),
                ('oncology_visit', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='When is the expected oncology visit?')),
                ('oncology_turnaround_time', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='What is the oncology visit turn-around time?')),
                ('treatment_initiation_visit', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='When is the expected treatment initiation visit?')),
                ('treatment_initiation_turnaround_time', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='What is the treatment initiation visit turn-around time?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Baseline Road Map',
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='BaselineClinicalSummary',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Time and Date')),
                ('symptoms_summary', models.TextField(max_length=1000, verbose_name='Summary of presenting symptoms and clinical impression')),
                ('cancer_concern', models.CharField(choices=[('cervical', 'Cervical Cancer'), ('breast', 'Breast Cancer'), ('head_n_neck', 'Head and Neck Cancer'), ('non_hodgkin_lymph', 'Non-Hodgkin Lymphoma'), ('hodgkin_lymph', 'Hodgkin Lymphoma'), ('oesophageal', 'Oesophageal Cancer'), ('vaginal', 'Vulvar/Vaginal Cancer'), ('anal', 'Anal Cancer'), ('kaposis_sarcoma', "Kaposi's sarcoma"), ('penile', 'Penile Cancer'), ('prostate', 'Prostate Cancer'), ('colorectal', 'Colorectal Cancer'), ('OTHER', 'Other')], max_length=20, verbose_name='Cancer of greatest concern')),
                ('cancer_concern_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('cancer_probability', models.CharField(choices=[('low', 'Low, cancer possible but other conditions are much more likely'), ('moderate', 'Moderate, cancer is among the most likely causes of the symptoms/signs'), ('high', 'High, cancer is the leading suspected cause of the symptoms/signs')], max_length=8)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Baseline Clinical Summary',
                'verbose_name_plural': 'Baseline Clinical Summaries',
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='SymptomAssessment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('symptom', models.CharField(max_length=50)),
                ('symptom_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future])),
                ('last_visit_date_estimated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is the symptom date estimated?')),
                ('last_visit_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date was estimated, if any?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('symptom_care_seeking', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.symptomandcareseekingassessment')),
            ],
            options={
                'verbose_name': 'Symptom Assessment',
                'abstract': False,
                'unique_together': {('symptom_care_seeking', 'symptom')},
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='If not a citizen, is the participant legally married to a Botswana citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have verified that the participant has signed the consent form')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the participant with a copy of their signed informed consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('report_datetime', models.DateTimeField(editable=False, null=True)),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('screening_identifier', models.CharField(blank=True, max_length=50, null=True, verbose_name='Screening identifier')),
                ('identity_type', models.CharField(choices=[('country_id', 'Country ID number'), ('passport', 'Passport'), ('birth_certificate', 'Birth Certificate'), ('OTHER', 'Other')], max_length=25, verbose_name='What type of identity number is this?')),
                ('language', models.CharField(blank=True, choices=[('tn', 'Setswana'), ('en', 'English'), ('kck', 'Ikalanga')], help_text='The language used for the consent process will also be used during data collection.', max_length=5, null=True, verbose_name='Language of consent')),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the participant')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the participant had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the participant questions about this study and the participant has demonstrated understanding')),
                ('verbal_script', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text='If no, participant is not eligible.', max_length=15, null=True, verbose_name="I have documented participant's details on the verbal script, and signed electronically")),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'ordering': ('-created',),
                'get_latest_by': 'consent_datetime',
                'abstract': False,
                'unique_together': {('first_name', 'dob', 'initials', 'version'), ('subject_identifier', 'version')},
            },
            bases=(edc_sms.models.subject_recipent_model_mixin.SubjectRecipientModelMixin, models.Model),
            managers=[
                ('consent', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='SMS',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('date_time_form_filled', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date SMS form filled')),
                ('next_ap_date', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='Date of next appointment (referral or return)')),
                ('date_reminder_sent', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date visit reminder SMS sent')),
                ('sms_outcome', models.CharField(choices=[('sms_sent', 'SMS sent'), ('sms_not_sent', 'SMS not sent')], max_length=50, verbose_name='Outcome of reminder SMS')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'SMS',
                'verbose_name_plural': 'SMSes',
                'abstract': False,
                'unique_together': {('subject_identifier', 'date_time_form_filled')},
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='PreviousFacilityVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('facility_visited', models.CharField(blank=True, choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], help_text='(select all that apply)', max_length=40, verbose_name='Which facilities has the patient been seen for similar symptoms?')),
                ('facility_visited_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=30, null=True, verbose_name='If Other, specify ...')),
                ('previous_facility_period', models.CharField(blank=True, help_text='specify variable (days, weeks, months, years)', max_length=15, null=True, verbose_name='For how long was he/she seen at facilities before enrollment visit?')),
                ('patient_call_initial', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.patientcallinitial')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'unique_together': {('patient_call_initial', 'facility_visited', 'previous_facility_period')},
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='OnSchedule',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('onschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future])),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('community_arm', models.CharField(blank=True, max_length=25, null=True)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'unique_together': {('subject_identifier', 'schedule_name')},
            },
            managers=[
                ('onsite', edc_base.sites.managers.CurrentSiteManager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='NextOfKin',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('kin_lastname', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Next of kin Surname')),
                ('kin_firstname', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Next of kin First name')),
                ('kin_relationship', models.CharField(choices=[('spouse', 'Spouse'), ('child', 'Child'), ('parent', 'Parent'), ('sibling', 'Sibling'), ('grandparents', 'Grandparents'), ('grandchild', 'Grandchild'), ('OTHER', 'Other')], max_length=20, verbose_name='Next of kin relationship')),
                ('kin_relation_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other, describe next of kin relationship')),
                ('kin_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Next of kin cellphone number')),
                ('kin_telephone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Next of kin telephone number')),
                ('clinician_call_enrollemt', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.cliniciancallenrollment')),
            ],
            options={
                'verbose_name': 'Next Of Kin',
                'unique_together': {('clinician_call_enrollemt', 'kin_cell', 'kin_telephone')},
            },
        ),
        migrations.CreateModel(
            name='MissedCallRecord',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('notes', models.TextField(max_length=150)),
                ('repeat_call', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='Scheduled date for repeat call')),
                ('missed_call', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.missedcall')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Missed Call Record',
                'abstract': False,
                'unique_together': {('missed_call', 'repeat_call')},
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='MedicalConditions',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('medical_condition', models.CharField(choices=[('cardiac_condition', 'Cardiac Condition'), ('metabolic_disease', 'Metabolic Disease'), ('respiratory_disease', 'Respiratory Disease'), ('neurological_disease', 'Neurological Disease'), ('musculoskeletal_disease', 'Muscoloskeletal Disease'), ('skin_disease', 'Skin Disease'), ('psychiatric_condition', 'Psychiatric Condition'), ('genitourinary_disease', 'Genitourinary Disease'), ('gastroenterological_disease', 'Gastroenterological Disease'), ('OTHER', 'Other (Specify)')], max_length=30, verbose_name='Which serious medical condition(s) does the patient have?')),
                ('medical_condition_specify', models.CharField(max_length=35, verbose_name='Specific diagnosis')),
                ('medical_condition_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('diagnosis_date', models.DateField(max_length=40, validators=[edc_base.model_validators.date.date_not_future], verbose_name='When was the patient diagnosed?')),
                ('diagnosis_date_estimate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the diagnosis date an estimate?')),
                ('diagnosis_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='If diagnoses date was estimated, which part of the date was estimated?')),
                ('on_medication', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=7, verbose_name='Is the patient of medication?')),
                ('treatment_type', models.CharField(blank=True, choices=[('atleast_once_a_month', 'Atleast once a month'), ('1-3_months', '1-3 months'), ('every_3-6_months', 'Every 3-6 months'), ('once_or_twice_a_year', 'Once or twice a year'), ('OTHER', 'Other (specify)')], max_length=20, null=True, verbose_name='how often does the participant see a doctor/nurse for their condition?')),
                ('treatment_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('medical_diagnosis', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.medicaldiagnosis')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Medical Conditions',
                'verbose_name_plural': 'Medical Conditions',
                'unique_together': {('medical_diagnosis', 'medical_condition')},
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('lab_test_type', models.CharField(choices=[('FBC', 'FBC'), ('RFT', 'RFT'), ('LFT', 'LFT'), ('HIV', 'HIV'), ('WBC', 'WBC'), ('Hb', 'Hb'), ('Plt', 'Plt'), ('Cr', 'Cr'), ('K', 'K'), ('Na', 'Na'), ('Glu', 'Glu'), ('pap_smear', 'Pap Smear'), ('OTHER', 'Other lab test (specify)')], help_text='(IF PATIENT CALL, ONLY ASK ABOUT RFT, FBC, LFT )', max_length=25, verbose_name='Type of lab test.')),
                ('lab_test_date', models.DateField(verbose_name='Date of lab test.')),
                ('lab_test_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other lab test, specify')),
                ('lab_test_status', models.CharField(choices=[('ordered', 'Ordered'), ('specimen_taken', 'Specimen taken'), ('specimen_logged_ipms', 'Specimen logged into IPMS'), ('specimen_recieved_nhl', 'Specimen received at NHL (for pathology only)'), ('results_available_ipms', 'Results available on IPMS'), ('results_available_paper', 'Results available on paper'), ('OTHER', 'Other (specify)')], max_length=50, verbose_name='Type of lab test.')),
                ('lab_test_status_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other lab test results status, specify details')),
                ('investigations', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.investigationsordered')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'unique_together': {('investigations', 'lab_test_type', 'lab_test_date')},
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='FacilityVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('interval_visit_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date of interval visit')),
                ('interval_visit_date_estimated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the interval visit date estimated?')),
                ('interval_visit_date_estimation', models.CharField(blank=True, choices=[('day', 'Estimated day only'), ('day_month', 'Estimated day and month'), ('month', 'Estimated month only'), ('year', 'Estimate year only'), ('day_month_year', 'Estimated day, month and year')], max_length=15, null=True, verbose_name='Which part of the date was estimated, if any?')),
                ('visit_facility', models.CharField(choices=[('athlone_hospital', 'Athlone Hospital'), ('bamalete_lutheran_hospital', 'Bamalete Lutheran Hospital'), ('bokaa_clinic', 'Bokaa clinic'), ('deborah_reteif_memorial_hospital', 'Deborah. Reteif. Memorial Hospital'), ('goodhope_hospital', 'Goodhope Hospital'), ('gweta_hospital', 'Gweta Hospital'), ('kanye_sda_hospital', 'Kanye SDA Hospital'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('lerala_clinic', 'Lerala clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('mahalapye_hospital', 'Mahalapye Hospital'), ('mandunyane_clinic', 'Mandunyane clinic'), ('manga_clinic', 'Manga clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('mmadianare_primary_hospital', 'Mmadinare Primary Hospital'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('nata_clinic', 'Nata clinic'), ('nyangagwe_hospital', 'Nyangagwe Hospital'), ('oodi_clinic', 'Oodi clinic'), ('otse_clinic', 'Otse clinic'), ('palapye_hospital', 'Palapye Hospital'), ('princess_marina_hospital', 'Princess Marina Hospital'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('scottish_livingstone_hospital', 'Scottish Livingstone Hospital'), ('sefophe_clinic', 'Sefophe clinic'), ('selibe_phikwe_hospital', 'Selibe Phikwe Hospital'), ('sheleketla_clinic', 'Sheleketla clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('thamaga_hospital', 'Thamaga Hospital'), ('OTHER', 'Other (specify)')], max_length=40, verbose_name='What facility was visited (per patient report)?')),
                ('visit_facility_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('visit_reason', models.CharField(blank=True, max_length=50, null=True, verbose_name='What was the reason for the visit?')),
                ('visit_outcome', models.CharField(choices=[('return', 'Return'), ('refer', 'Refer'), ('discharge', 'Discharge')], max_length=15, verbose_name='What was the outcome of the visit?')),
                ('patient_call_followup', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.patientcallfollowup')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Facility Visit',
                'unique_together': {('patient_call_followup', 'interval_visit_date', 'visit_facility')},
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='EvaluationTimeline',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('key_step', models.CharField(max_length=50, verbose_name='Key step')),
                ('target_date', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='Target Date')),
                ('key_step_status', models.CharField(choices=[('done', 'Done'), ('not_done', 'Not Done')], max_length=8, verbose_name='Key step status')),
                ('completion_date', models.DateField(blank=True, help_text='or date determined not required', null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Achieved date')),
                ('review_required', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Requires multidisiciplinary review?')),
                ('navigation_plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.navigationsummaryandplan')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Evaluation Timeline',
                'unique_together': {('navigation_plan', 'key_step', 'target_date')},
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
    ]
