# Generated by Django 3.0 on 2020-01-02 15:11

import _socket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_revision.revision_field
import edc_base.model_fields.custom_fields
import edc_base.model_fields.date_estimated
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.model_validators.eligibility
import edc_base.model_validators.phone
import edc_base.sites.managers
import edc_base.utils
import edc_consent.validators
import edc_protocol.validators
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CallAchievements',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClinicianCallFollowUp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date of Visit')),
                ('start_time', models.TimeField(verbose_name='Clinician follow-up: start time')),
                ('facility_visited', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=25, verbose_name='Name and type  of facility visited')),
                ('call_clinician', models.CharField(help_text='(and indicate whether doctor or nurse)', max_length=50, verbose_name='Name of clinician spoken to on the phone for the follow up call')),
                ('facility_unit', models.CharField(choices=[('OPD', 'OPD'), ('A&E', 'A&E'), ('IDCC', 'IDCC'), ('medicine_ward', 'Medicine ward'), ('GYN_ward', 'GYN ward'), ('surgery_ward', 'Surgery ward'), ('OTHER', 'Other')], max_length=25, verbose_name='Unit at facility where patient was seen')),
                ('facility_unit_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='if other, Describe unit at facility where patient was seen')),
                ('visit_type', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Inpatient visit?')),
                ('perfomance_status', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('pain_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('general_comments', models.TextField(blank=True, max_length=150, null=True, verbose_name='Any other general comments on visit (including what was achieved during visit)')),
                ('patient_disposition', models.CharField(choices=[('return', 'Return'), ('refer', 'Refer'), ('discharge', 'Discharge')], max_length=15, verbose_name='Patient disposition at end of visit')),
                ('referral_date', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='Referral appointment date')),
                ('referral_facility', models.CharField(choices=[('OPD', 'OPD'), ('A&E', 'A&E'), ('IDCC', 'IDCC'), ('medicine_ward', 'Medicine ward'), ('GYN_ward', 'GYN ward'), ('surgery_ward', 'Surgery ward'), ('OTHER', 'Other')], max_length=25, verbose_name='Name and type of facility patient being referred to (referral facility)')),
                ('referral_reason', models.CharField(blank=True, max_length=50, null=True, verbose_name='If referred, reason for referral')),
                ('referral_discussed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Was referral discussed with referral clinician?')),
                ('referral_discussed_clinician', models.CharField(blank=True, help_text='(If referral clinician name is missing, please write "UNK")', max_length=25, null=True, verbose_name='Name of referral clinician discussed with (and indicate whether nurse or doctor)')),
                ('return_visit_scheduled', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='If not discharged, does patient have return visit appointment scheduled?')),
                ('return_visit_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_is_future], verbose_name='Return visit appointment date')),
                ('investigation_ordered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="(IF YES, COMPLETE 'INVESTIGATION FORM')", max_length=3, verbose_name='Was any investigation ordered during this visit?')),
                ('triage_status', models.CharField(choices=[('emergency', 'Emergency'), ('urgent', 'Urgent'), ('routine', 'Routine')], max_length=10, verbose_name="What is this patient's triage status")),
                ('transport_support', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="(IF YES, COMPLETE 'TRANSPORT FORM')", max_length=3, verbose_name='Does patient need or is patient receiving transport support?')),
                ('followup_end_time', models.TimeField(verbose_name='Clinician follow-up: end time')),
            ],
            options={
                'verbose_name': 'Clinician Call - FollowUp',
            },
        ),
        migrations.CreateModel(
            name='Disposition',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExitFromStudy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exit_reason', models.CharField(choices=[('death', 'Patient death'), ('ltfu', 'Patient lost to follow-up'), ('eval_complete', 'Cancer evaluation complete'), ('declines_further_eval', 'Patient or clinician declines further evaluation'), ('patient_requests_removal', 'Patient requests removal from Potlako'), ('clinician_requests_removal', 'Clinician requests removal from Potlako')], max_length=50, verbose_name='Reason for exit')),
                ('general_comments', models.TextField(max_length=150, verbose_name='Any general comments about patient exit?')),
                ('last_visit_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name="What was the date of patient's last visit?")),
                ('last_visit_facility', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, verbose_name="What was the facility of the patient's last visit")),
                ('death_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of patient death')),
                ('cause_of_death', models.CharField(blank=True, max_length=20, null=True)),
                ('place_of_death', models.CharField(blank=True, choices=[('home', 'At home or in the community'), ('facility', 'At facility'), ('unknown', 'Place of death unknown')], max_length=30, null=True)),
                ('facility_patient_died', models.CharField(blank=True, choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, null=True, verbose_name='Name of facility where patient died')),
                ('death_info_source', models.CharField(blank=True, choices=[('clinician', 'Clinician'), ('next_of_kin1', 'Next of kin 1'), ('next_of_kin2', 'Next of kin 2'), ('other_fam_member', 'Other family member'), ('OTHER', 'Other (specify)')], max_length=20, null=True, verbose_name='Source of patient death information ')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=20, null=True, verbose_name='If other source of patient death communication, describe')),
                ('ltfu_criteria_met', models.CharField(blank=True, choices=[('missed_visits', 'Missed visits'), ('attempted_calls_to_patient', 'attempted calls to patient x 3 or 3 different days'), ('attempted_calls_to_next_kin1', 'attempted calls to next of kin 1 x 3 or 3 different days'), ('attempted_calls_to_next_kin2', 'attempted calls to next of kin 2 x 3 or 3 different days'), ('home_visit_done_unable_to_trace', 'home visit done and unable to trace')], max_length=50, null=True, verbose_name='Criteria met for loss to follow up')),
                ('new_kgotla_res', models.CharField(blank=True, max_length=25, null=True, verbose_name="If relocated, patient's NEW Kgotla of residence")),
                ('new_village_res', models.CharField(blank=True, max_length=25, null=True, verbose_name="If relocated, patient's NEW village of residence")),
                ('new_district_res', models.CharField(blank=True, choices=[('chobe', 'Chobe - Chobe'), ('bobonong', 'Central - Bobonong'), ('boteti', 'Central - Boteti'), ('mahalapye', 'Central - Mahalapye'), ('orapa', 'Central - Orapa'), ('serowe_palapye', 'Central - Serowe/Palapye'), ('tutume', 'Central - Tutume'), ('CKGR', 'ghanzi - CKGR'), ('ghanzi', 'ghanzi - Ghanzi'), ('kgalagdi_north', 'Kgalagadi North'), ('kgalagadi_south', 'Kgalagadi South'), ('kgatleng', 'Kgatleng'), ('kweneng_east', 'Kweneng - East'), ('kweneng_west', 'Kweneng - West'), ('delta', 'north West - Delta'), ('ngamiland_north', 'North West - Ngamiland Nort'), ('ngamiland_south', 'North East - Ngamiland South'), ('north_east', 'North East'), ('barolong', 'Southern - Barolong'), ('ngwaketse', 'Southern - Ngwaketse'), ('ngwaketse_west', 'Southern - Ngwaketse West')], max_length=25, null=True, verbose_name="If relocated, patient's NEW district of residence")),
                ('new_facility_name', models.CharField(blank=True, max_length=30, null=True, verbose_name="If relocated, patient's NEW facility name")),
                ('new_facility_type', models.CharField(blank=True, choices=[('health_post', 'health post'), ('primary_clinic', 'primary clinic'), ('primary_hospital', 'primary hospital'), ('secondary_hospital', 'secondary hospital'), ('referral_hospital', 'referral hospital')], max_length=30, null=True, verbose_name="If relocated, patient's NEW facility type")),
                ('exit_hiv_status', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('unknown', 'Unknown'), ('missing', 'Missing')], max_length=10, verbose_name="What was patient's HIV status at exit?")),
                ('latest_hiv_test_known', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the latest HIV test date known for the patient?')),
                ('hiv_test_date', models.DateField(blank=True, null=True, verbose_name='If yes, please enter date of HIV test')),
                ('review_flag', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Flag for physician review')),
                ('components_rec', models.CharField(choices=[('provider_edication', 'Provider education'), ('diagnostic_facilitation', 'Diagnostic facilitation (pre-biopsy/test)'), ('access_to_diagnostic_results', 'Access to diagnostic results (e.g. histology)'), ('cancer_treatment_facilitation_post_test_results', 'Cancer treatment facilitation post-test results'), ('retention_or_completion_of_cancer_treatment', 'Retention or completion of cancer treatment'), ('none', 'None'), ('OTHER', 'Other (specify)')], max_length=50, verbose_name='Potlako components received (or potentially received)')),
                ('components_rec_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='Other Potlako component received:')),
                ('cancer_treatment_rec', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], help_text='(Example: radiation, surgery (beyond biopsy), chemotherapy, ART for KS, esophageal stenting)', max_length=7, verbose_name='Was any cancer specific treatment received?')),
                ('treatment_intent', models.CharField(choices=[('curative', 'Curative'), ('palliative', 'Palliative'), ('uncertain', 'Uncertain')], max_length=10, verbose_name='At time of exit, what was treatment intent? ')),
                ('date_therapy_started', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date started cancer specific therapy')),
            ],
            options={
                'verbose_name': 'Exit from study',
                'verbose_name_plural': 'Exit from study',
            },
        ),
        migrations.CreateModel(
            name='HomeVisit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_date_time', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Date of Visit')),
                ('clinician_name', models.CharField(max_length=25, verbose_name='Name of clinician1 who made the home visit')),
                ('clinician_type', models.CharField(choices=[('med_officer', 'Medical Officer'), ('fam_medicine', 'Specialist - Family Medicine'), ('internal_medicine', 'Specialist - Internal Medicine'), ('general_surgeon', 'Specialist - General Surgeon'), ('ob_gyn', 'Specialist - Ob/GYN (Gynecologist)'), ('oncologist', 'Specialist - Oncologist'), ('pathologist', 'Specialist - Pathologist'), ('hematologist', 'Specialist - Hematologist'), ('palliative_care', 'Specialist - Palliative care'), ('doc_other', 'Doctor - Other type (specify)'), ('FNP', 'Nurse - FNP'), ('midwife', 'Nurse - Midwife'), ('community_health', 'Nurse - Community health'), ('nurse_other', 'Nurse - Other type (specify)'), ('RN', 'Nurse - RN')], max_length=50, verbose_name='Type of clinician1 who made the home visit')),
                ('facility_clinician_works', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, verbose_name='Name of facility where clinician1 works')),
                ('clinician_two_name', models.CharField(max_length=25, verbose_name='Name of clinician2 who made the home visit')),
                ('clinician_two_type', models.CharField(choices=[('med_officer', 'Medical Officer'), ('fam_medicine', 'Specialist - Family Medicine'), ('internal_medicine', 'Specialist - Internal Medicine'), ('general_surgeon', 'Specialist - General Surgeon'), ('ob_gyn', 'Specialist - Ob/GYN (Gynecologist)'), ('oncologist', 'Specialist - Oncologist'), ('pathologist', 'Specialist - Pathologist'), ('hematologist', 'Specialist - Hematologist'), ('palliative_care', 'Specialist - Palliative care'), ('doc_other', 'Doctor - Other type (specify)'), ('FNP', 'Nurse - FNP'), ('midwife', 'Nurse - Midwife'), ('community_health', 'Nurse - Community health'), ('nurse_other', 'Nurse - Other type (specify)'), ('RN', 'Nurse - RN')], max_length=50, verbose_name='Type of clinician2 who made the home visit')),
                ('clinician_two_facility', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, verbose_name='Name of facility where clinician2 works')),
                ('clinician_three_name', models.CharField(max_length=25, verbose_name='Name of clinician3 who made the home visit')),
                ('clinician_three_type', models.CharField(choices=[('med_officer', 'Medical Officer'), ('fam_medicine', 'Specialist - Family Medicine'), ('internal_medicine', 'Specialist - Internal Medicine'), ('general_surgeon', 'Specialist - General Surgeon'), ('ob_gyn', 'Specialist - Ob/GYN (Gynecologist)'), ('oncologist', 'Specialist - Oncologist'), ('pathologist', 'Specialist - Pathologist'), ('hematologist', 'Specialist - Hematologist'), ('palliative_care', 'Specialist - Palliative care'), ('doc_other', 'Doctor - Other type (specify)'), ('FNP', 'Nurse - FNP'), ('midwife', 'Nurse - Midwife'), ('community_health', 'Nurse - Community health'), ('nurse_other', 'Nurse - Other type (specify)'), ('RN', 'Nurse - RN')], max_length=50, verbose_name='Type of clinician3 who made the home visit')),
                ('clinician_three_facility', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, verbose_name='Name of facility where clinician3 works')),
                ('visit_outcome', models.CharField(choices=[('alive', 'Patient alive (specify)'), ('dead', 'Patient died'), ('ltfu', 'Patient lost to follow up')], help_text="(IF DIED OR LTFU, COMPLETE 'EXIT FORM')", max_length=30, verbose_name='Outcome of home visit')),
                ('next_appointment', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_is_future], verbose_name='If alive, next appointment date')),
                ('next_ap_facility', models.CharField(blank=True, choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, null=True, verbose_name='If alive, next appointment facility')),
                ('nex_ap_type', models.CharField(blank=True, choices=[('referral', 'Referral'), ('return', 'Return')], max_length=8, null=True, verbose_name='If alive, next appointment type')),
                ('general_comments', models.TextField(blank=True, max_length=150, null=True, verbose_name='General comments on home visit (including if patient alive reasons for missing appointments)')),
            ],
            options={
                'verbose_name': 'Home Visit',
            },
        ),
        migrations.CreateModel(
            name='Investigations',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('start_time', models.TimeField(verbose_name='Investigations: start time')),
                ('facility_ordered', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=25, verbose_name='Facility where labs were ordered')),
                ('ordered_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date of clinic visit where labs were ordered')),
                ('lab_tests_ordered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Were lab tests ordered??')),
                ('pathology_tests_ordered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Were pathology tests ordered?')),
                ('pathology_test', models.CharField(blank=True, choices=[('biopsy_bone_marrow', 'Biopsy - bone marrow'), ('biopsy_lymph_node', 'Biopsy - lymph node'), ('biopsy_other', 'Biopsy - other (specify)'), ('FNA', 'FNA'), ('pap_smear', 'Pap smear')], max_length=25, null=True, verbose_name='Type of pathology test')),
                ('biopsy_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If other biopsy, please describe')),
                ('fna_location', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If FNA, please indicate location')),
                ('pathology_specimen_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date pathology specimen taken')),
                ('pathology_nhl_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date pathology specimen received at NHL')),
                ('pathology_result_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date pathology results reported')),
                ('pathology_received_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date pathology results received by clinician')),
                ('pathology_communicated_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date pathology results communicated to patient')),
                ('imaging_tests', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Were imaging tests conducted during this encounter?')),
                ('imaging_test_status', models.CharField(blank=True, choices=[('ordered', 'Ordered'), ('performed', 'Performed')], max_length=15, null=True)),
                ('imaging_test_type', models.CharField(blank=True, choices=[('xray_chest', 'Xray - chest'), ('xray_other', 'Xray - other (specify)'), ('ultrasound_abdomen', 'Ultrasound - abdomen'), ('ultrasound_other', 'Ultrasound - other (specify)'), ('CT', 'CT (specify)'), ('MRI', 'MRI (specify)'), ('OTHER', 'Other imaging test (specify)')], max_length=20, null=True)),
                ('ultrasound_tests_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='Types of ultrasound tests ordered (other, specify)')),
                ('imaging_tests_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='Types of imaging tests ordered (other, specify)')),
                ('imaging_tests_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date imaging test performed (completed)')),
                ('specimen_tracking_notes', models.TextField(blank=True, max_length=100, null=True, verbose_name='Path specimen tracking notes')),
                ('diagnosis_results', models.CharField(blank=True, choices=[('xray_chest', 'Xray - chest'), ('xray_other', 'Xray - other (specify)'), ('ultrasound_abdomen', 'Ultrasound - abdomen'), ('ultrasound_other', 'Ultrasound - other (specify)'), ('CT', 'CT (specify)'), ('MRI', 'MRI (specify)'), ('OTHER', 'Other imaging test (specify)')], max_length=20, null=True, verbose_name='Diagnosis results (provider)')),
                ('cancer_type', models.CharField(blank=True, max_length=15, null=True, verbose_name='If cancer, type of cancer diagnosed')),
                ('diagnoses_made', models.CharField(blank=True, max_length=15, null=True, verbose_name='If not cancer, diagnosis made')),
                ('cancer_stage', models.CharField(blank=True, choices=[('stage_0', 'Stage 0'), ('stage_I', 'Stage I'), ('stage_II', 'Stage II'), ('stage_III', 'Stage III'), ('stage_IV', 'Stage IV'), ('OTHER', 'Other')], max_length=10, null=True, verbose_name='If cancer, stage of cancer')),
                ('cancer_stage_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=10, null=True, verbose_name='If other cancer stage, specify')),
                ('bpcc_enrolled', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Participant enrolled in BPCC?')),
                ('bpcc_identifier', models.CharField(max_length=25, verbose_name='BPCC identifier (BID)')),
                ('end_time', models.DurationField(verbose_name='Investigations: end time')),
            ],
        ),
        migrations.CreateModel(
            name='MissedCall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date of entry')),
                ('notes', models.TextField(max_length=150)),
                ('repeat_call', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='When to schedule repeat call?')),
            ],
            options={
                'verbose_name': 'Missed Call',
            },
        ),
        migrations.CreateModel(
            name='MissedVisit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name="Datetime 'missed visit' form entered")),
                ('missed_visit_date', models.DateField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of reference missed visit (visit previously scheduled that patient missed)')),
                ('facility_scheduled', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, verbose_name='Facility where missed appointment was scheduled')),
                ('visit_type', models.CharField(choices=[('referral', 'Referral'), ('return', 'Return')], max_length=10, verbose_name='Type of visit missed')),
                ('determine_missed', models.CharField(choices=[('database', 'Coordinator referenced database and contacted clinician/facility'), ('clinic_register', 'Clinician referenced clinic register and contacted clinician'), ('clinician_contacted', 'Patient contacted clinician'), ('coordinator_contacted', 'Patient contacted coordinator'), ('OTHER', 'Other')], max_length=100, verbose_name='How was missed visit determined?')),
                ('inquired', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was patient or next of kin called to inquire about the missed call')),
                ('inquired_from', models.CharField(choices=[('patient_called', 'Patient called (phone answered)'), ('kin1_called', 'Next of kin 1 called (phone answered) after patient called (NO answer, SMS sent)'), ('kin2_called', 'Next of kin 2 called (phone answered) after patient and next of kin 1 called (NO answer for both, SMS sent to both)'), ('unreachable', 'Unable to reach patient or next of kin')], max_length=100, verbose_name='Who was the phone call to?')),
                ('reason_missed', models.CharField(choices=[('no_appointment_knowledge', 'Did not know about appointment'), ('forgot_appointment', 'Did not remember appointment date'), ('no_transport_fare', 'Could not afford transport fee'), ('no_access_to_transport', 'Did not have access to transportation'), ('different_facility', 'Went to a different facility'), ('felt_better', 'Did not think they had to come in because feeling better'), ('didnt_think_theyd_get_help', 'Did not wish to return because they did not think they would get help'), ('deceased', 'Patient deceased'), ('OTHER', 'Other (specify)')], max_length=50, verbose_name='Reason for missed visit')),
                ('reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other, describe reason for missed visit')),
                ('next_appointment', models.DateField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.date_is_future], verbose_name='Date of next appointment')),
                ('next_ap_facility', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, verbose_name='Facility at next appointment')),
                ('next_ap_type', models.CharField(choices=[('referral', 'Referral'), ('return', 'Return')], max_length=10, verbose_name='Type of next appointment')),
                ('home_visit', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='(After 3 patient and 3 next of kin phone attempts made)', max_length=3, verbose_name='Should home visit be arranged?')),
                ('transport_need', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has patient expressed need for transportation or is he/she already receiving transport support?')),
                ('clinician_name', models.CharField(max_length=50, verbose_name='Name of clinician (and indicate whether doctor or nurse) that coordinator discussed missed visit with')),
                ('comments', models.TextField(help_text='(Note that this form may involve multiple phonecalls (e.g. with clinician, patient and thenclinician again))', max_length=150, verbose_name='Any other general comments about missed visit encounter?')),
            ],
            options={
                'verbose_name': 'Missed Visit',
            },
        ),
        migrations.CreateModel(
            name='PatientStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_encounter', models.DateField()),
                ('sms_due', models.CharField(max_length=15, verbose_name='Due for SMS prior to visit')),
                ('days_from_recent_visit', models.PositiveIntegerField(verbose_name='Days from most recent visit')),
                ('physician_flag', models.CharField(max_length=10)),
                ('bpcc_bid_entered', models.CharField(max_length=10)),
                ('bcpp_enrolled', models.CharField(max_length=10, verbose_name='Marked BCPP enrolled')),
                ('deceased', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10)),
                ('days_from_death_report', models.PositiveIntegerField()),
                ('calc_hiv_status', models.CharField(max_length=15, verbose_name='Calculated HIV status')),
                ('missed_calls', models.IntegerField(verbose_name='Number of missed calls')),
                ('seen_at_marina', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3)),
                ('exit_status', models.CharField(max_length=10)),
                ('first_last_visit_days', models.PositiveIntegerField(verbose_name='Days from first to last visit in Potlako (if not exited, days to today)')),
                ('missed_visits', models.PositiveIntegerField(verbose_name='Number of missed visits')),
            ],
            options={
                'verbose_name': 'Status',
                'verbose_name_plural': 'Status',
            },
        ),
        migrations.CreateModel(
            name='PhysicianReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_date_time', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Date time of physician review')),
                ('reviewer_name', models.CharField(choices=[('neo', 'Neo'), ('scott', 'Scott'), ('OTHER', 'Other')], max_length=5, verbose_name='Name of reviewer')),
                ('reviewer_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='Physician reviewer (other - specify)')),
                ('physician_summary', models.CharField(max_length=50)),
                ('diagnosis_plan', models.TextField(max_length=150, verbose_name='Diagnosis/Management plan')),
                ('needs_discussion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Needs management discussion')),
                ('coordinator_summary', models.CharField(max_length=50, verbose_name='Research coordinator summary')),
                ('cancer_eval', models.CharField(choices=[('complete', 'Complete'), ('unable_to_complete', 'Incomplete, but unable to complete (i.e. death, refusal)'), ('incomplete_needs_priority', 'Incomplete, needs priority Potlako follow-up'), ('complete_needs_priority', 'Complete, needs priority Potlako follow-up')], max_length=50, verbose_name='Cancer evaluation')),
                ('reason_fu_needed', models.CharField(max_length=100, verbose_name='Why patient needs continued Potlako follow-up')),
                ('final_status', models.CharField(choices=[('confirmed', 'Confirmed cancer'), ('probable', 'Probable cancer'), ('possible_not', 'Possible not cancer'), ('probable_not', 'Probable not cancer, no alternative dx'), ('confirmed_not', 'Confirmed not cancer, alternative dx'), ('incomplete_dx', 'Incomplete dx')], max_length=40)),
                ('non_cancer_diagnosis', models.CharField(blank=True, choices=[('fibroadenoma', 'Fibroadenoma'), ('breast_cyst', 'Breast cyst'), ('breast_abscess', 'Breast Abscess'), ('tb', 'Tuberculosis'), ('skin_ulcer', 'Non-healing skin ulcer'), ('pre_cancerous_lesion', 'Cervical pre-cancerous lesion'), ('no_alt_diagnosis_est', 'No alternative diagnosis established'), ('OTHER', 'Other')], max_length=40, null=True, verbose_name='Final Non-Cancer diagnosis')),
                ('non_cancer_diagnosis_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=40, null=True, verbose_name='Final Non-Cancer Diagnosis, Other')),
                ('cancer_diagnosis', models.CharField(blank=True, choices=[('cervical', 'Cervical Cancer'), ('breast', 'Breast Cancer'), ('head_n_neck', 'Head and Neck Cancer'), ('non_hodgkin_lymph', 'Non-Hodgkin Lymphoma'), ('hodgkin_lymph', 'Hodgkin Lymphoma'), ('esophageal', 'Esophageal'), ('vuginal', 'Vulvar/Vaginal Cancer'), ('anal', 'Anal Cancer'), ('kaposis_sarcoma', "Kaposi's sarcoma"), ('penile', 'Penile Cancer'), ('prostate', 'Prostate Cancer'), ('colorectal', 'Colorectal Cancer'), ('OTHER', 'Other')], max_length=30, null=True, verbose_name='Final Cancer Diagnosis')),
                ('cancer_diagnosis_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=40, null=True, verbose_name='Final Cancer Diagnosis, Other')),
                ('to_be_flagged', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Case instructive and to be flagged for future reference')),
            ],
            options={
                'verbose_name': 'Physician Review',
            },
        ),
        migrations.CreateModel(
            name='SMS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_form_filled', models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Date SMS form filled')),
                ('next_ap_date', models.DateField(validators=[edc_base.model_validators.date.date_is_future], verbose_name='Date of next appointment (referral or return)')),
                ('date_reminder_sent', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date visit reminder SMS sent')),
                ('sms_outcome', models.CharField(choices=[('patient_sent_sms_received', 'SMS sent to patient and receipt confirmed'), ('patient_sent_sms_not_received', 'SMS sent to patient and receipt NOT confirmed'), ('kin1_sent_sms_received', 'SMS sent to next of kin 1 and receipt confirmed'), ('kin1_sent_sms_not_received', 'SMS sent to next of kin 1 and receipt NOT confirmed'), ('kin2_sent_sms_received', 'SMS sent to next of kin 2 and receipt confirmed'), ('kin2_sent_sms_not_received', 'SMS sent to next of kin 2 and receipt NOT confirmed')], max_length=50, verbose_name='Outcome of reminder SMS')),
            ],
            options={
                'verbose_name': 'SMS',
                'verbose_name_plural': 'SMSes',
            },
        ),
        migrations.CreateModel(
            name='Transport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Datetime transport form entered')),
                ('is_criteria_met', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient meet the criteria for transport support')),
                ('qualification', models.CharField(max_length=100, verbose_name='What is your highest level of education?')),
                ('housemate', models.CharField(choices=[('parents', 'Parents'), ('siblings', 'Siblings'), ('children', 'Children'), ('OTHER', 'Other friend or relative')], max_length=30, verbose_name='Who do you live with?')),
                ('car_ownership', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is there a car at home?')),
                ('criteria_met', models.CharField(choices=[('social_welfare_assistance', 'On social welfare assistance'), ('disability', 'Unable to work due to physical or mental disability'), ('residing_in_mobile_stop_area', 'Residing in mobile stop area'), ('no_public_transport', 'Residing in area with no public transport'), ('lives_far', 'Lives >= 20km away from nearest health facility'), ('missed_visits_due_trans_challenges', 'Has missed appointments due to transportation challenges'), ('OTHER', 'Other')], max_length=100, verbose_name='What criteria has been met for transportation support?')),
                ('next_visit_date', models.DateField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.date_is_future], verbose_name='Visit Date for which transportation is being planned (next visit date)')),
                ('visit_facility', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=100, verbose_name='Visit facility for which transport is being planned')),
                ('transport_type', models.CharField(choices=[('facility_vehicle', 'Facility Vehicle - Arranged by RC'), ('bus', 'Bus Voucher'), ('cash', 'Cash transfer to patient'), ('patient_arranged_vehicle', 'Facility Vehicle - Arranged by Patient or Clinician')], max_length=100, verbose_name='Type of transport support being arranged')),
                ('facility_vehicle_status', models.CharField(choices=[('in_progress', 'Request made to facility, arrangement in progress'), ('to_be_communicated', 'Arrangement confirmed by facility but not yet communicated with patient or clinician'), ('confirmed_communicated', 'Arrangement confirmed by facility and communicated to the patient and clinician'), ('vehicle_cannot_be_provided', 'Request made facility NOT able to provide transport/vehicle for patient'), ('OTHER', 'Other (specify)'), ('N/A', 'N/A')], max_length=100, verbose_name='Status of facility vehicle arrangement at end of transport planning encounter')),
                ('vehicle_status_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=100, null=True, verbose_name='If other facility vehicle status, describe details')),
                ('vehicle_request_date', models.DateField(verbose_name='Date of initial request for facility vehicle')),
                ('facility_personnel', models.CharField(max_length=25, verbose_name='Facility transport office personnel who received the request')),
                ('bus_voucher_status', models.CharField(choices=[('not_drafted', 'Letter not yet drafted'), ('not_sent', 'Letter completed but not yet sent to facility'), ('not_received', 'Letter sent to facility (but not yet received)'), ('patient_received', 'Letter received by patient'), ('OTHER', 'Other (specify)'), ('N/A', 'N/A')], max_length=50, verbose_name='Status of bus voucher arrangement at end of transport planning encounter')),
                ('bus_status_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other, describe status of transport arrangement')),
                ('cash_transfer_status', models.CharField(choices=[('not_initiated', 'Transaction not yet initiated'), ('successful_confirmed', 'Transaction successful and patient confirmed'), ('successful_unconfirmed', 'Transaction successful but no patient confirmation'), ('not_successful', 'Transaction not successful (specify)'), ('N/A', 'N/A')], max_length=50, verbose_name='Status of cash transfer arrangement at end of transport planning encounter')),
                ('cash_status_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, help_text='(Please detail issue and action steps to resolve issue)', max_length=100, null=True, verbose_name='If transaction did not go through, specify details')),
                ('comments', models.TextField(help_text='(IF NOTHING TO REPORT, PLEASE WRITE "NA")', max_length=150, verbose_name='Any other general comments regarding transport planning')),
            ],
            options={
                'verbose_name': 'Transport',
                'verbose_name_plural': 'Transport',
            },
        ),
        migrations.CreateModel(
            name='SubjectScreening',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('screening_identifier', models.CharField(editable=False, max_length=36, unique=True, verbose_name='Eligibility Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('has_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'NO' STOP patient cannot be enrolled )", max_length=3, validators=[edc_base.model_validators.eligibility.eligible_if_yes], verbose_name='Has a cancer diagnosis been documented? ')),
                ('enrollment_site', models.CharField(choices=[('gaborone_private_hospital', 'Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_Hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], help_text='Hospital where subject is recruited', max_length=100, null=True)),
                ('eligible', models.BooleanField(default=False, editable=False)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.Site')),
            ],
            options={
                'verbose_name': 'Potlako Eligibility',
                'verbose_name_plural': 'Potlako Eligibility',
            },
        ),
        migrations.CreateModel(
            name='PatientCallInitial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_call_time', models.TimeField(verbose_name='Start of patient initial call (timestamp)')),
                ('patient_call_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date of initial patient call')),
                ('start_time', models.TimeField(help_text='Minutes', verbose_name='Time at START of encounter')),
                ('dob_known', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient know their date of birth?')),
                ('dob', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If yes, please enter date of birth')),
                ('patient_contact_residence_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has there been any change in patient contact or residence information since the initial visit to health facility?')),
                ('residential_district', models.CharField(blank=True, choices=[('chobe', 'Chobe - Chobe'), ('bobonong', 'Central - Bobonong'), ('boteti', 'Central - Boteti'), ('mahalapye', 'Central - Mahalapye'), ('orapa', 'Central - Orapa'), ('serowe_palapye', 'Central - Serowe/Palapye'), ('tutume', 'Central - Tutume'), ('CKGR', 'ghanzi - CKGR'), ('ghanzi', 'ghanzi - Ghanzi'), ('kgalagdi_north', 'Kgalagadi North'), ('kgalagadi_south', 'Kgalagadi South'), ('kgatleng', 'Kgatleng'), ('kweneng_east', 'Kweneng - East'), ('kweneng_west', 'Kweneng - West'), ('delta', 'north West - Delta'), ('ngamiland_north', 'North West - Ngamiland Nort'), ('ngamiland_south', 'North East - Ngamiland South'), ('north_east', 'North East'), ('barolong', 'Southern - Barolong'), ('ngwaketse', 'Southern - Ngwaketse'), ('ngwaketse_west', 'Southern - Ngwaketse West')], max_length=50, null=True, verbose_name='Enter the updated patient residential district')),
                ('patient_village', models.CharField(blank=True, max_length=30, null=True, verbose_name='Enter the updated patient village or town')),
                ('patient_kgotla', models.CharField(blank=True, max_length=30, null=True, verbose_name='Enter the updated patient kgotla')),
                ('primary_clinic', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, verbose_name='Nearest primary clinic or health post to where patient resides')),
                ('patient_contact_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Any changes to be made to patient contact information (patient phone)?')),
                ('patient_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Please enter updated patient phone number')),
                ('next_of_kin', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient agree to us contacting next of kin?')),
                ('next_kin_contact_change', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Any changes to be made to next of kin contact information (patient phone)?')),
                ('primary_keen_contact', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Please enter next of kin 1 phone number')),
                ('secondary_keen_contact', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Please enter next of kin 2 phone number')),
                ('patient_symptoms', models.TextField(max_length=250, verbose_name='What symptom(s) is the patient having for which they were seen at the clinic 1 week ago?')),
                ('patient_symptoms_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='When did the patient start experiencing symptoms?')),
                ('other_facility', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Before enrollment visit, has the patient been seen for similar symptoms at other facilities?')),
                ('facility_number', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='How many facilities?')),
                ('facility_previously_visited', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=25, verbose_name='Which facilities has the patient been seen for similar symptoms?')),
                ('previous_facility_period', models.CharField(help_text='specify variable (days, weeks, months, years)', max_length=15, verbose_name='For how long was he/she seen at facilities before enrollment visit?')),
                ('perfomance_status', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Patient performance status')),
                ('pain_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Patient pain score')),
                ('hiv_status', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('unknown', 'Unknown'), ('missing', 'Missing')], max_length=10, verbose_name="What is patient's current HIV status?")),
                ('hiv_test_date_known', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='If positive or negative, does patient know date of Yes last HIV test?')),
                ('hiv_test_date', models.DateField(blank=True, help_text='If positive test, date of positive test, if negative, date of most recent negative test', null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If patient knows date of last HIV test, please record')),
                ('cancer_suspicion_known', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is patient aware that cancer is suspected as a diagnosis?')),
                ('enrollment_clinic_visit_method', models.CharField(max_length=50, verbose_name='How did patient get to enrollment clinic visit?')),
                ('slh_travel', models.CharField(max_length=50, verbose_name='If you had to travel to SLH to see a doctor, how would you go about it?')),
                ('tests_ordered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does patient report any tests being ordered or done at or since enrollment visit?')),
                ('tests_type', models.CharField(blank=True, choices=[('blood_test', 'Blood test'), ('biopsy', 'Biopsy (specify body part)'), ('chest_xray', 'Chest X-Ray'), ('ultrasound', 'Ultrasound'), ('ct', 'CT'), ('OTHER', 'Other')], max_length=15, null=True, verbose_name='If yes, type of test')),
                ('tests_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=15, null=True, verbose_name='If Other, specify ...')),
                ('biospy_part', models.CharField(blank=True, max_length=15, null=True, verbose_name='Describe part of body where biopsy was performed')),
                ('next_appointment_date', models.DateField(verbose_name='Next appointment date (per patient report)')),
                ('next_visit_delayed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was the next visit date delayed, missed or rescheduled for this encounter?')),
                ('visit_delayed_count', models.IntegerField(blank=True, null=True, verbose_name='If yes, how many times?')),
                ('visit_delayed_reason', models.CharField(blank=True, choices=[('patient_factor', 'Patient Factor'), ('health_system_factor', 'Health System Factor')], max_length=25, null=True, verbose_name='If yes, was delayed, missed, or rescheduled visit primarily related to a patient or health system factor?')),
                ('patient_factor', models.CharField(blank=True, choices=[('patient_work_obligations', 'Patient work obligations (formal and informal work, including lands and cattle post)'), ('patient_family_obligations', 'Patient family obligations (childcare, funeral, illness in family, etc)'), ('patient_paying_transport_difficulty', 'Patient difficulty paying for transportation, including family member to accompany'), ('patient_finding_tarnsport_difficulty', 'Patient difficulty finding transportation or family member to accompany'), ('OTHER', 'Other patient related reason (specify)')], max_length=50, null=True, verbose_name='Which patient factor best describes reason for delayed, missed, or rescheduled visit?')),
                ('patient_factor_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='Please describe other patient factor')),
                ('health_system_factor', models.CharField(blank=True, choices=[('clinic_hospital_unable_schedule_2_weeks', 'Clinic/hospital unable to schedule within 2 weeks (overbooked, uncertain schedule, etc)'), ('clinic_hospital_did_not_schedule_2_weeks', 'Clinic/hospital did not schedule within 2 weeks (unwilling, low priority case, etc)'), ('clinic_no_transport', 'Clinic/hospital provided transportation not available (needed for other clinic use, broken, driver on leave, etc)'), ('service_unavailable', 'Clinic/hospital service no available on scheduled date (surgical consultation, biopsy clinic, etc)'), ('service_provider_not_available', 'Clinic/hospital provider not  available on scheduled date (provider called to emergency, provider on leave, etc)'), ('supplies_not_available', 'Clinic/hospital supplies not available on scheduled date (no biopsy needles, out of stock chemotherapy, etc)'), ('OTHER', 'other clinic or hospital related reason (specify)')], max_length=50, null=True, verbose_name='Which health system factor best describes reason for delayed, missed, or rescheduled visit?')),
                ('health_system_factor_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='Please describe other health system factor')),
                ('delayed_visit_description', models.TextField(blank=True, max_length=150, null=True, verbose_name='Please briefly describe the situation resulting in the delayed, missed, or rescheduled visit')),
                ('next_appointment_facility', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], help_text='per patient report', max_length=30, verbose_name='Next appointment facility')),
                ('next_appointment_facility_unit', models.CharField(choices=[('OPD', 'OPD'), ('A&E', 'A&E'), ('IDCC', 'IDCC'), ('medicine_ward', 'Medicine ward'), ('GYN_ward', 'GYN ward'), ('surgery_ward', 'Surgery ward'), ('OTHER', 'Other')], max_length=20)),
                ('next_appointment_facility_unit_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If Other, specify ...')),
                ('patient_understanding', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If not, inform patient of the date as specified by the clinician. If there is a discrepancy, call clinician to verify', max_length=3, verbose_name="Is patient's understanding of the next appointment (date and location) the same as clinicians?")),
                ('transport_support', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='IF YES, COMPLETE TRANSPORT FORM', max_length=3, verbose_name='Has patient expressed need for transport support?')),
                ('clinician_information', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Any information to be passed back to clinician?')),
                ('comments', models.TextField(blank=True, max_length=100, null=True, verbose_name='Any other general comments regarding patient encouter')),
                ('cancer_probability', models.CharField(choices=[('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High')], max_length=10, verbose_name='Cancer probability (baseline)')),
                ('encounter_end_time', models.TimeField(verbose_name='Time at END of encounter')),
                ('initial_call_end_time', models.TimeField(verbose_name='End of patient initial call (timestamp)')),
                ('call_duration', models.DurationField(verbose_name='Duration of patient initial call')),
                ('call_achievements', models.ManyToManyField(to='potlako_subject.CallAchievements', verbose_name='What has been achieved during the call')),
            ],
            options={
                'verbose_name': 'Patient call - Initial',
                'verbose_name_plural': 'Patient call - Initial',
            },
        ),
        migrations.CreateModel(
            name='PatientCallFollowUp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coordinator_encounter_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of coordinator encounter')),
                ('start_time', models.TimeField(verbose_name='Patient follow up: start time')),
                ('encounter_duration', models.DurationField(help_text='Minutes', verbose_name='Duration of encounter')),
                ('patient_residence_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has their been any change in patient residence information?')),
                ('patient_district', models.CharField(choices=[('chobe', 'Chobe - Chobe'), ('bobonong', 'Central - Bobonong'), ('boteti', 'Central - Boteti'), ('mahalapye', 'Central - Mahalapye'), ('orapa', 'Central - Orapa'), ('serowe_palapye', 'Central - Serowe/Palapye'), ('tutume', 'Central - Tutume'), ('CKGR', 'ghanzi - CKGR'), ('ghanzi', 'ghanzi - Ghanzi'), ('kgalagdi_north', 'Kgalagadi North'), ('kgalagadi_south', 'Kgalagadi South'), ('kgatleng', 'Kgatleng'), ('kweneng_east', 'Kweneng - East'), ('kweneng_west', 'Kweneng - West'), ('delta', 'north West - Delta'), ('ngamiland_north', 'North West - Ngamiland Nort'), ('ngamiland_south', 'North East - Ngamiland South'), ('north_east', 'North East'), ('barolong', 'Southern - Barolong'), ('ngwaketse', 'Southern - Ngwaketse'), ('ngwaketse_west', 'Southern - Ngwaketse West')], max_length=50, verbose_name='Patient residence (district)')),
                ('patient_village', models.CharField(max_length=50, verbose_name='Patient residence (village)')),
                ('patient_kgotla', models.CharField(max_length=50, verbose_name='Patient residence (kgotla)')),
                ('phone_number_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has their been any change in patient phone number?')),
                ('patient_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Please enter updated patient phone number')),
                ('next_kin_contact_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Any changes to be made to next of kin contact information (patient phone)?')),
                ('primary_keen_contact', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Please enter next of kin 1 phone number')),
                ('secondary_keen_contact', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Please enter next of kin 2 phone number')),
                ('perfomance_status', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Patient performance status')),
                ('pain_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Patient pain score')),
                ('new_complaints', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient have any new complaints?')),
                ('new_complaints_description', models.TextField(blank=True, max_length=100, null=True, verbose_name='If yes, please describe')),
                ('interval_visit', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If yes, details should be verified with clinician at next clinician check-in call and reconciled with clinician call encounter records', max_length=3, verbose_name='Have there been any interval visits to facilities since the enrollment visit?')),
                ('interval_visit_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date of interval visit')),
                ('visit_facility', models.CharField(blank=True, choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, null=True, verbose_name='What facility was visited (per patient report)?')),
                ('visit_reason', models.CharField(blank=True, max_length=50, null=True, verbose_name='What was the reason for the visit?')),
                ('visit_outcome', models.CharField(blank=True, choices=[('return', 'Return'), ('refer', 'Refer'), ('discharge', 'Discharge')], max_length=15, null=True, verbose_name='What was the outcome of the visit?')),
                ('investigation_ordered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="(IF YES, COMPLETE 'INVESTIGATION FORM')", max_length=3, verbose_name='Have there been any interval investigations ordered or resulted?')),
                ('transport_support', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="(IF YES, COMPLETE 'TRANSPORT FORM')", max_length=3, verbose_name='Does the patient need transport support?')),
                ('next_appointment_date', models.DateField(verbose_name='Next appointment date (per patient report)')),
                ('next_visit_delayed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was the next visit date delayed, missed or rescheduled for this encounter?')),
                ('visit_delayed_count', models.IntegerField(blank=True, null=True, verbose_name='If yes, how many times?')),
                ('visit_delayed_reason', models.CharField(blank=True, choices=[('patient_factor', 'Patient Factor'), ('health_system_factor', 'Health System Factor')], max_length=25, null=True, verbose_name='If yes, was delayed, missed, or rescheduled visit primarily related to a patient or health system factor?')),
                ('patient_factor', models.CharField(blank=True, choices=[('patient_work_obligations', 'Patient work obligations (formal and informal work, including lands and cattle post)'), ('patient_family_obligations', 'Patient family obligations (childcare, funeral, illness in family, etc)'), ('patient_paying_transport_difficulty', 'Patient difficulty paying for transportation, including family member to accompany'), ('patient_finding_tarnsport_difficulty', 'Patient difficulty finding transportation or family member to accompany'), ('OTHER', 'Other patient related reason (specify)')], max_length=50, null=True, verbose_name='Which patient factor best describes reason for delayed, missed, or rescheduled visit?')),
                ('patient_factor_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='Please describe other patient factor')),
                ('health_system_factor', models.CharField(blank=True, choices=[('clinic_hospital_unable_schedule_2_weeks', 'Clinic/hospital unable to schedule within 2 weeks (overbooked, uncertain schedule, etc)'), ('clinic_hospital_did_not_schedule_2_weeks', 'Clinic/hospital did not schedule within 2 weeks (unwilling, low priority case, etc)'), ('clinic_no_transport', 'Clinic/hospital provided transportation not available (needed for other clinic use, broken, driver on leave, etc)'), ('service_unavailable', 'Clinic/hospital service no available on scheduled date (surgical consultation, biopsy clinic, etc)'), ('service_provider_not_available', 'Clinic/hospital provider not  available on scheduled date (provider called to emergency, provider on leave, etc)'), ('supplies_not_available', 'Clinic/hospital supplies not available on scheduled date (no biopsy needles, out of stock chemotherapy, etc)'), ('OTHER', 'other clinic or hospital related reason (specify)')], max_length=50, null=True, verbose_name='Which health system factor best describes reason for delayed, missed, or rescheduled visit?')),
                ('health_system_factor_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='Please describe other health system factor')),
                ('delayed_visit_description', models.TextField(blank=True, max_length=150, null=True, verbose_name='Please briefly describe the situation resulting in the delayed, missed, or rescheduled visit')),
                ('next_appointment_facility', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, verbose_name='Next appointment facility and type')),
                ('patient_understanding', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If not, inform patient of the date as specified by the clinician. If there is a discrepancy, call clinician to verify', max_length=3, verbose_name="Is patient's understanding of the next appointment (date and location) the same as clinicians?")),
                ('transport_support_received', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='e.g. funds transferred, vehicle arrived, etc.', max_length=3, verbose_name='Did patient receive expected transportation support for his/her last visit?')),
                ('transport_details', models.TextField(blank=True, max_length=100, null=True, verbose_name='Please provide details')),
                ('clinician_communication_issues', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Have there been any issues in communication with clinicians, or with their care in general?')),
                ('clinician_issues_details', models.TextField(blank=True, max_length=100, null=True, verbose_name='Please provide details')),
                ('coordinator_communication_issues', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Have there been any issues in communication with coordinator?')),
                ('coordinator_issues_details', models.TextField(blank=True, max_length=100, null=True, verbose_name='Please provide details')),
                ('other_issues', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Have there been any other issues?')),
                ('other_issues_details', models.TextField(blank=True, max_length=100, null=True, verbose_name='Please provide details')),
                ('medical_evaluation_understanding', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does patient have fair understanding of next steps regarding medical evaluation?')),
                ('next_step_understanding', models.TextField(blank=True, max_length=100, null=True, verbose_name='Does patient have fair understanding of next steps (details)')),
                ('sms_received', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Did patient receive SMS reminder for last scheduled visit?')),
                ('additional_comments', models.TextField(blank=True, max_length=100, null=True, verbose_name='Provide any additional comments')),
                ('patient_followup_end_time', models.TimeField(verbose_name='Patient follow up: end time')),
                ('call_achievements', models.ManyToManyField(to='potlako_subject.CallAchievements', verbose_name='What has been achieved during the call')),
            ],
            options={
                'verbose_name': 'Patient call - FollowUp',
            },
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('lab_test_type', models.CharField(choices=[('FBC', 'FBC'), ('RFT', 'RFT'), ('LFT', 'LFT'), ('HIV', 'HIV'), ('WBC', 'WBC'), ('Hb', 'Hb'), ('Plt', 'Plt'), ('Cr', 'Cr'), ('K', 'K'), ('Na', 'Na'), ('Glu', 'Glu'), ('pap_smear', 'Pap Smear'), ('OTHER', 'Other lab test (specify)')], help_text='(IF PATIENT CALL, ONLY ASK ABOUT RFT, FBC, LFT )', max_length=25, verbose_name='Type of lab test.')),
                ('lab_test_date', models.DateField(verbose_name='Date of lab test.')),
                ('lab_test_type_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other lab test, specify')),
                ('lab_test_status', models.CharField(choices=[('ordered', 'Ordered'), ('specimen_taken', 'Specimen taken'), ('specimen_logged_ipms', 'Specimen logged into IPMS'), ('specimen_recieved_nhl', 'Specimen received at NHL (for pathology only)'), ('results_available_ipms', 'Results available on IPMS'), ('results_available_paper', 'Results available on paper'), ('OTHER', 'Other (specify)')], max_length=50, verbose_name='Type of lab test.')),
                ('lab_test_status_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=50, null=True, verbose_name='If other lab test results status, specify details')),
                ('investigations', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='potlako_subject.Investigations')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalSubjectScreening',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('screening_identifier', models.CharField(db_index=True, editable=False, max_length=36, verbose_name='Eligibility Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('has_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'NO' STOP patient cannot be enrolled )", max_length=3, validators=[edc_base.model_validators.eligibility.eligible_if_yes], verbose_name='Has a cancer diagnosis been documented? ')),
                ('enrollment_site', models.CharField(choices=[('gaborone_private_hospital', 'Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_Hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], help_text='Hospital where subject is recruited', max_length=100, null=True)),
                ('eligible', models.BooleanField(default=False, editable=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.Site')),
            ],
            options={
                'verbose_name': 'historical Potlako Eligibility',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='If not a citizen, is the participant legally married to a Botswana citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('identity_type', models.CharField(max_length=25, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the participant')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the participant had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the participant questions about this study and the participant has demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have verified that the participant has signed the consent form')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the participant with a copy of their signed informed consent')),
                ('may_store_genetic_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the participant agree that a portion of the blood sample that is taken be stored for genetic analysis?')),
                ('may_store_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the participant agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'Yes' STOP participant cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant literate?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name")),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], help_text='The language used for the consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('report_datetime', models.DateTimeField(editable=False, null=True)),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('screening_identifier', models.CharField(blank=True, max_length=50, null=True, verbose_name='Screening identifier')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.Site')),
            ],
            options={
                'verbose_name': 'historical subject consent',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ClinicianCallEnrollment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('reg_date', models.DateField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of visit when patient was registered at facility')),
                ('record_id', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, unique=True, verbose_name='Record Id')),
                ('call_start', models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Clinical Enrollment Call: Start Time')),
                ('contact_date', models.DateField(verbose_name='Date of communication of patient to coordinator')),
                ('call_clinician', models.CharField(max_length=25, verbose_name='Name of clinician spoken to on the phone for initial call')),
                ('call_clinician_type', models.CharField(choices=[('med_officer', 'Medical Officer'), ('fam_medicine', 'Specialist - Family Medicine'), ('internal_medicine', 'Specialist - Internal Medicine'), ('general_surgeon', 'Specialist - General Surgeon'), ('ob_gyn', 'Specialist - Ob/GYN (Gynecologist)'), ('oncologist', 'Specialist - Oncologist'), ('pathologist', 'Specialist - Pathologist'), ('hematologist', 'Specialist - Hematologist'), ('palliative_care', 'Specialist - Palliative care'), ('doc_other', 'Doctor - Other type (specify)'), ('FNP', 'Nurse - FNP'), ('midwife', 'Nurse - Midwife'), ('community_health', 'Nurse - Community health'), ('nurse_other', 'Nurse - Other type (specify)'), ('RN', 'Nurse - RN')], max_length=50, verbose_name='Type of clinician spoken to on the phone')),
                ('received_training', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has the participant received Potlako training')),
                ('call_clinician_other', models.TextField(blank=True, max_length=250, null=True, verbose_name="If 'Other type', describe the type of clinician")),
                ('facility', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, verbose_name='Name of facility visited at enrollment')),
                ('facility_unit', models.CharField(choices=[('OPD', 'OPD'), ('A&E', 'A&E'), ('IDCC', 'IDCC'), ('medicine_ward', 'Medicine ward'), ('GYN_ward', 'GYN ward'), ('surgery_ward', 'Surgery ward'), ('OTHER', 'Other')], max_length=20, verbose_name='Unit at facility where patient was seen at enrollment')),
                ('unit_other', models.TextField(blank=True, max_length=250, null=True, verbose_name="If 'Other', describe unit at facility where patient was seen at enrollment")),
                ('national_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, unique=True, verbose_name='Patient ID number (Omang)')),
                ('hospital_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, unique=True, verbose_name='Patient hospital ID number (if available)')),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Patient surname')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Patient first name')),
                ('other_names', models.CharField(blank=True, max_length=100, null=True, verbose_name='Patient other names')),
                ('dob', models.DateField(verbose_name='Patient Date of Birth')),
                ('age_in_years', models.IntegerField(help_text='(Years)', verbose_name='Patient age')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, verbose_name='Gender')),
                ('residence', models.CharField(choices=[('chobe', 'Chobe - Chobe'), ('bobonong', 'Central - Bobonong'), ('boteti', 'Central - Boteti'), ('mahalapye', 'Central - Mahalapye'), ('orapa', 'Central - Orapa'), ('serowe_palapye', 'Central - Serowe/Palapye'), ('tutume', 'Central - Tutume'), ('CKGR', 'ghanzi - CKGR'), ('ghanzi', 'ghanzi - Ghanzi'), ('kgalagdi_north', 'Kgalagadi North'), ('kgalagadi_south', 'Kgalagadi South'), ('kgatleng', 'Kgatleng'), ('kweneng_east', 'Kweneng - East'), ('kweneng_west', 'Kweneng - West'), ('delta', 'north West - Delta'), ('ngamiland_north', 'North West - Ngamiland Nort'), ('ngamiland_south', 'North East - Ngamiland South'), ('north_east', 'North East'), ('barolong', 'Southern - Barolong'), ('ngwaketse', 'Southern - Ngwaketse'), ('ngwaketse_west', 'Southern - Ngwaketse West')], max_length=50, verbose_name='District where patient resides')),
                ('village_town', models.CharField(max_length=100, verbose_name='Village or Town where patient resides')),
                ('kgotla', models.CharField(max_length=100, verbose_name='Kgotla where patient resides')),
                ('nearest_facility', models.CharField(choices=[('boatlaname_hp', 'Boatlaname HP'), ('bokaa_pc', 'Bokaa PC'), ('borakalalo_pc', 'Borakalalo PC'), ('boribamo_pc', 'Boribamo PC'), ('boswelakoko_pc', 'Boswelakoko PC'), ('ditshukudu_hp', 'Ditshukudu HP'), ('gakgatla_hp', 'Gakgatla HP'), ('gakuto_hp', 'Gakuto HP'), ('gamodubu_hp', 'Gamodubu HP'), ('hatsalatladi_hp', 'Hatsalatladi HP'), ('kgope_hp', 'Kgope HP'), ('kgosing_pc', 'Kgosing PC'), ('kopong_pc', 'Kopong PC'), ('kubung_hp', 'Kubung HP'), ('kumakwane_hp', 'Kumakwane HP'), ('kweneng_hp', 'Kweneng HP'), ('lekgwapheng_hp', 'Lekgwapheng HP'), ('lentsweletau_pc', 'Lentsweletau PC'), ('lephepe_pc', 'Lephepe PC'), ('lesilakgokong_hp', 'Lesilakgokong HP'), ('loologane_pc', 'Loologane PC'), ('magokotswane_hp', 'Magokotswane HP'), ('mahetlwe_hp', 'Mahetlwe HP'), ('medie_hp', 'Medie HP'), ('mmankgodi_pc', 'Mmankgodi PC'), ('mmanoko_hp', 'Mmanoko HP'), ('mmatseta_hp', 'Mmatseta HP'), ('mogonono_hp', 'Mogonono HP'), ('molepolole_comm_clinic_pc', 'Molepolole Community Clinic PC'), ('phuthadikobo_pc', 'Phuthadikobo PC'), ('phuting_hp', 'Phuting HP'), ('rungwane_hp', 'Rungwane HP'), ('shadishadi_hp', 'Shadishadi HP'), ('SLH', 'SLH - Scotting Livingstone Hospital'), ('sojwe_pc', 'Sojwe PC'), ('thamaga_pc', 'Thamaga PC'), ('TPH', 'TPH - Thamaga PH'), ('marotse_ms', 'Marotse MS'), ('chaoke_ms', 'Chaoke MS'), ('dam18_ms', 'Dam 18 MS'), ('dikgathong_ms', 'Dikgathong MS'), ('dikhutsana_ms', 'Dikhutsana MS'), ('diphepe_ms', 'Diphepe MS'), ('gamatsela_ms', 'Gamatsela MS'), ('gamononyane_ms', 'Gamononyane MS'), ('hubasanoko_ms', 'Hubasanoko MS'), ('kaminakwe_ms', 'Kaminakwe MS'), ('kgapamadi_ms', 'Kgapamadi MS'), ('khuduyamajako_ms', 'Khuduyamajako MS'), ('kokonje_ms', 'Kokonje MS'), ('lekgatshwane_ms', 'Lekgatshwane MS'), ('maanege_ms', 'Maanege MS'), ('mapateng_ms', 'Mapateng MS'), ('mmakanke_ms', 'Mmakanke MS'), ('mmamarobole_ms', 'Mmamarobole MS'), ('mmamohiko_ms', 'Mmamohiko MS'), ('mmankgodi_east_ms', 'Mmankgodi East MS'), ('mmaothate_ms', 'Mmaothate MS'), ('mmapaba_ms', 'Mmapaba MS'), ('mmasebele_ms', 'Mmasebele MS'), ('moamoge_ms', 'Moamoge MS'), ('moetlo_ms', 'Moetlo MS'), ('mophakane_ms', 'Mophakane MS'), ('mosekele_ms', 'MoseKELE MS'), ('moselele1_ms', 'Moselele 1 MS'), ('moselele2_ms', 'Moselele 2 MS'), ('mosokotso_ms', 'Mosokotso MS'), ('motlabaki_ms', 'Motlabaki MS'), ('phiriyabokwetse_ms', 'Phiriyabokwetse MS'), ('ramagapu_ms', 'Ramagapu MS'), ('ramakgatlanyane_ms', 'Ramakgatlanyane MS'), ('ramankhung_ms', 'Ramankhung MS'), ('ramaphatle_ms', 'Ramankhung MS'), ('ramasenyane_ms', 'Ramasenyane MS'), ('rammidi_ms', 'Rammidi MS'), ('rasegwagwa_ms', 'Rammidi MS'), ('sasakwe_ms', 'Sasakwe MS'), ('sekhukhwane_ms', 'Sekhukhwane MS'), ('sepene_ms', 'Sepene MS'), ('shonono_ms', 'Shonono MS'), ('suping_ms', 'Suping MS'), ('scatter&lamber_pc', 'Scatter & Lamber PC (private)'), ('ikago_pc', 'Ikago PC'), ('mec_pc', 'Molepopole Education Centre PC'), ('molepolole_prisons_pc', 'Molepolole Prisons PC'), ('princess_marina', 'Princess Marina Hospital')], max_length=30, verbose_name='Nearest primary clinic or health post to where patient resides')),
                ('near_facility_other', models.CharField(blank=True, max_length=30, null=True, verbose_name='Nearest primary clinic or health post to where patient resides (if outside Kweneng East)')),
                ('primary_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Patient phone number 1 (Primary)')),
                ('secondary_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Patient phone number 2 (Secondary)')),
                ('kin_lastname', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Next of kin 1 Surname')),
                ('kin_firstname', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Next of kin 1 First name')),
                ('kin_relationship', models.CharField(choices=[('spouse', 'Spouse'), ('child', 'Child'), ('parent', 'Parent'), ('sibling', 'Sibling'), ('grandparents', 'Grandparents'), ('grandchild', 'Grandchild'), ('OTHER', 'Other')], max_length=20, verbose_name='Next of kin 1 relationship')),
                ('kin_relation_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, describe next of kin 1 relationship')),
                ('kin_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Next of kin 1 phone number')),
                ('other_kin_avail', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Next of kin 2 details available?')),
                ('other_kin_lastname', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Next of kin 2 Surname')),
                ('other_kin_firstname', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Next of kin 2 First name')),
                ('other_kin_rel', models.CharField(choices=[('spouse', 'Spouse'), ('child', 'Child'), ('parent', 'Parent'), ('sibling', 'Sibling'), ('grandparents', 'Grandparents'), ('grandchild', 'Grandchild'), ('OTHER', 'Other')], max_length=20, verbose_name='Next of kin 2 relationship')),
                ('other_kin_rel_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, describe next of kin 2 relationship')),
                ('other_kin_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Next of kin 2 phone number')),
                ('same_clinician', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the clinician speaking on the phone the same one that was seen by the patient')),
                ('more_clinicians', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='At enrollment, was the patient seen by more than one clinician')),
                ('clinician_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Name of clinician (or most senior clinician) who saw the patient')),
                ('clinician_type', models.CharField(choices=[('med_officer', 'Medical Officer'), ('fam_medicine', 'Specialist - Family Medicine'), ('internal_medicine', 'Specialist - Internal Medicine'), ('general_surgeon', 'Specialist - General Surgeon'), ('ob_gyn', 'Specialist - Ob/GYN (Gynecologist)'), ('oncologist', 'Specialist - Oncologist'), ('pathologist', 'Specialist - Pathologist'), ('hematologist', 'Specialist - Hematologist'), ('palliative_care', 'Specialist - Palliative care'), ('doc_other', 'Doctor - Other type (specify)'), ('FNP', 'Nurse - FNP'), ('midwife', 'Nurse - Midwife'), ('community_health', 'Nurse - Community health'), ('nurse_other', 'Nurse - Other type (specify)'), ('RN', 'Nurse - RN')], max_length=50, verbose_name='Type of clinician (or most senior clinician) who saw the patient')),
                ('clinician_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If Other type, describe type of clinician (or the most senior clinician) who saw patient')),
                ('symptoms', models.TextField(max_length=150, verbose_name='Presenting symptom(s)')),
                ('early_symptoms_date', models.DateField(verbose_name='Date of earliest onset symptom(s)')),
                ('symptoms_details', models.TextField(max_length=150, verbose_name='Details of symptom duration')),
                ('suspected_cancer', models.CharField(help_text="((if clinician unsure, write 'unsure'))", max_length=100, verbose_name='Suspected Cancer type')),
                ('suspicion_level', models.CharField(choices=[('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High')], max_length=10, verbose_name="How strong is clinician's suspicion for cancer?")),
                ('performance', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)], verbose_name='Performance Status (ECOG)')),
                ('pain_score', models.IntegerField(default=0, help_text='(confirm with clinician that this is out of total score of 5)', validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('last_hiv_result', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('unknown', 'Unknown'), ('missing', 'Missing')], max_length=10, verbose_name="What was the patient's last HIV result?")),
                ('referral_reason', models.TextField(max_length=250, verbose_name='Reason for referral')),
                ('referral_date', models.DateField(default=edc_base.utils.get_utcnow, validators=[edc_base.model_validators.date.date_is_future], verbose_name='Referral appointment date')),
                ('referral_facility', models.CharField(max_length=100, verbose_name='Name and type of facility patient being referred to(referral facility)')),
                ('referral_unit', models.CharField(choices=[('OPD', 'OPD'), ('A&E', 'A&E'), ('IDCC', 'IDCC'), ('medicine_ward', 'Medicine ward'), ('GYN_ward', 'GYN ward'), ('surgery_ward', 'Surgery ward'), ('OTHER', 'Other')], max_length=20, verbose_name='Unit where patient is being referred to')),
                ('referral_discussed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was referral discussed with referral clinician?')),
                ('referral_name', models.CharField(help_text='(If name is not specified or unknown, plese write "UNK")', max_length=100, verbose_name='Name of referral clinician patient discussed with')),
                ('referral_fu', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient have a return follow-up visit at thereferring facility?')),
                ('referral_fu_date', models.DateField(default=edc_base.utils.get_utcnow, verbose_name='Date of appointment for return visit to referring facility')),
                ('triage_status', models.CharField(choices=[('emergency', 'Emergency'), ('urgent', 'Urgent'), ('routine', 'Routine')], max_length=10, verbose_name="What is patient's triage status?")),
                ('investigated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Where there any investigations ordered or performed during this visit?')),
                ('notes', models.TextField(help_text="(COMPLETE 'INVESTIGATIONS FORM' AFTER TESTS HAVE BEEN COMLETED)", max_length='250', verbose_name='Notes on investigations ordered - continue to Labs only after tests have been done')),
                ('vehicle_req', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="(IF YES, COMPLETE THE 'TRANSPORT FORM')", max_length=3, verbose_name='Does patient require facility vehicle transport support according to clinician?')),
                ('paper_register', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Has patient been entered in Potlako paper register?')),
                ('comments', models.TextField(max_length=250, verbose_name='Are there any other comments regarding this enrollment vist?')),
                ('call_end', models.DateTimeField(default=edc_base.utils.get_utcnow, verbose_name='Clinician initial call : End time (date/time)')),
                ('call_duration', models.IntegerField(verbose_name='Duration of clinician enrollment call')),
                ('patient_disposition', models.ManyToManyField(help_text='(select all that apply)', to='potlako_subject.Disposition', verbose_name="What was the patient's disposition at the end of this visit?")),
            ],
            options={
                'verbose_name': 'Clinician call - Enrollment',
                'verbose_name_plural': 'Clinician call - Enrollment',
            },
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='If not a citizen, is the participant legally married to a Botswana citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('identity_type', models.CharField(max_length=25, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the participant')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the participant had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the participant questions about this study and the participant has demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have verified that the participant has signed the consent form')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the participant with a copy of their signed informed consent')),
                ('may_store_genetic_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the participant agree that a portion of the blood sample that is taken be stored for genetic analysis?')),
                ('may_store_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the participant agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'Yes' STOP participant cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant literate?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name")),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], help_text='The language used for the consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('report_datetime', models.DateTimeField(editable=False, null=True)),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('screening_identifier', models.CharField(blank=True, max_length=50, null=True, verbose_name='Screening identifier')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.Site')),
            ],
            options={
                'ordering': ('-created',),
                'get_latest_by': 'consent_datetime',
                'abstract': False,
                'unique_together': {('first_name', 'dob', 'initials', 'version'), ('subject_identifier', 'version')},
            },
            managers=[
                ('consent', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
    ]
